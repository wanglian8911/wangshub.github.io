<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神奇的战士</title>
  
  <subtitle>Do The Right Thing.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangshub.github.io/"/>
  <updated>2018-07-27T02:36:59.000Z</updated>
  <id>http://wangshub.github.io/</id>
  
  <author>
    <name>神奇的战士</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>教程与笔记</title>
    <link href="http://wangshub.github.io/2018/07/27/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BD%BF%E7%94%A8%20OpenAI%20Gym%20%E6%95%99%E7%A8%8B%E4%B8%8E%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangshub.github.io/2018/07/27/机器人强化学习之使用 OpenAI Gym 教程与笔记/</id>
    <published>2018-07-27T02:34:40.000Z</published>
    <updated>2018-07-27T02:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器人强化学习之使用-OpenAI-Gym-教程与笔记"><a href="#机器人强化学习之使用-OpenAI-Gym-教程与笔记" class="headerlink" title="机器人强化学习之使用 OpenAI Gym 教程与笔记"></a>机器人强化学习之使用 OpenAI Gym 教程与笔记</h1><blockquote><p>除了试图直接去建立一个可以模拟成人大脑的程序之外， 为什么不试图建立一个可以模拟小孩大脑的程序呢?如果它接 受适当的教育，就会获得成人的大脑。 — 阿兰·图灵</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>强化学习 (Reinforcement learning) 是机器学习的一个子领域用于制定决策和运动自由度控制。强化学习主要研究在复杂未知的环境中，智体(agent)实现某个目标。强化学习最引人入胜的两个特点是</p><ul><li><p><strong>强化学习非常通用，可以用来解决需要作出一些列决策的所有问题：</strong>例如，训练机器人跑步和弹跳，制定商品价格和库存管理，玩 Atari 游戏和棋盘游戏等等。</p></li><li><p><strong>强化学习已经可以在许多复杂的环境中取得较好的实验结果：</strong>例如 Deep RL 的 Alpha Go等</p></li></ul><p><a href="https://gym.openai.com/docs/" target="_blank" rel="noopener">Gym</a> 是一个研究和开发强化学习相关算法的仿真平台。</p><ul><li>无需智体先验知识；</li><li>兼容常见的数值运算库如 TensorFlow、Theano 等</li></ul><h2 id="Gym-的一个最小例子-CartPole-v0"><a href="#Gym-的一个最小例子-CartPole-v0" class="headerlink" title="Gym 的一个最小例子 CartPole-v0"></a>Gym 的一个最小例子 <code>CartPole-v0</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">'CartPole-v0'</span>)</span><br><span class="line">env.reset()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    env.render()</span><br><span class="line">    env.step(env.action_space.sample()) <span class="comment"># take a random action</span></span><br></pre></td></tr></table></figure><p><strong>运行效果</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1ftmzl7ss9aj20a804a0sj.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>至此，第一个 Hello world 就算正式地跑起来了！</p><h2 id="观测-Observations"><a href="#观测-Observations" class="headerlink" title="观测(Observations)"></a>观测(Observations)</h2><p>在第一个小栗子中，使用了 <code>env.step()</code> 函数来对每一步进行仿真，在 Gym 中，<code>env.step()</code> 会返回 4 个参数：</p><ul><li><p><strong>观测</strong> Observation (Object)：当前 step 执行后，环境的观测(类型为对象)。例如，从相机获取的像素点，机器人各个关节的角度或棋盘游戏当前的状态等；</p></li><li><p><strong>奖励</strong> Reward (Float): 执行上一步动作(action)后，智体(agent)获得的奖励(浮点类型)，不同的环境中奖励值变化范围也不相同，但是强化学习的目标就是使得总奖励值最大；</p></li><li><p><strong>完成</strong> Done (Boolen): 表示是否需要将环境重置 <code>env.reset</code>。大多数情况下，当 <code>Done</code> 为 <code>True</code> 时，就表明当前回合(episode)或者试验(tial)结束。例如当机器人摔倒或者掉出台面，就应当终止当前回合进行重置(reset);</p></li><li><p><strong>信息</strong> Info (Dict): 针对调试过程的诊断信息。在标准的智体仿真评估当中不会使用到这个 info，具体用到的时候再说。</p></li></ul><p>总结来说，这就是一个强化学习的基本流程，在每个时间点上，智体执行 action，环境返回上一次 action 的观测和奖励，用图表示为</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1ftn0jm54q0j20gm082t8y.jpg" alt="智体与环境交互" title="">                </div>                <div class="image-caption">智体与环境交互</div>            </figure><p>在 Gym 仿真中，每一次回合开始，需要先执行 <code>reset()</code> 函数，返回初始观测信息，然后根据标志位 <code>done</code> 的状态，来决定是否进行下一次回合。代码表示为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">'CartPole-v0'</span>)</span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    observation = env.reset()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        env.render()</span><br><span class="line">        print(observation)</span><br><span class="line">        action = env.action_space.sample()</span><br><span class="line">        observation, reward, done, info = env.step(action)</span><br><span class="line">        <span class="keyword">if</span> done:</span><br><span class="line">            print(<span class="string">"Episode finished after &#123;&#125; timesteps"</span>.format(t+<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>仿真截图如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fto3j0pf0yj20go0bqdfu.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>每次 <code>action</code> 前，将上一次 <code>observation</code> 打印，可以得到打印日志如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[ 0.0349103   1.14771978 -0.03934506 -1.64631971]</span><br><span class="line">[ 0.0578647   1.34327926 -0.07227145 -1.95099638]</span><br><span class="line">[ 0.08473028  1.14899616 -0.11129138 -1.68156178]</span><br><span class="line">[ 0.1077102   0.95532555 -0.14492261 -1.42550525]</span><br><span class="line">[ 0.12681672  1.15191062 -0.17343272 -1.75974995]</span><br><span class="line">[ 0.14985493  0.95912509 -0.20862772 -1.52564382]</span><br><span class="line">Episode finished after 16 timesteps</span><br><span class="line">[ 0.03628829 -0.03189712 -0.01997778  0.02529094]</span><br><span class="line">[ 0.03565035 -0.22672696 -0.01947196  0.31160431]</span><br><span class="line">[ 0.03111581 -0.42156616 -0.01323988  0.59808332]</span><br><span class="line">[ 0.02268449 -0.61650037 -0.00127821  0.8865666 ]</span><br></pre></td></tr></table></figure><h2 id="空间（Spaces）"><a href="#空间（Spaces）" class="headerlink" title="空间（Spaces）"></a>空间（Spaces）</h2><p>在前面的两个小栗子中，每次执行的动作(action)都是从环境动作空间中随机进行选取的，但是这些动作 (action) 是什么?在 Gym 的仿真环境中，有运动空间 <code>action_space</code> 和观测空间 <code>observation_space</code> 两个指标，程序中被定义为 <code>Space</code> 类型，用于描述有效的运动和观测的格式和范围。下面是一个代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line">env = gym.make(<span class="string">'CartPole-v0'</span>)</span><br><span class="line">print(env.action_space)</span><br><span class="line"><span class="comment">#&gt; Discrete(2)</span></span><br><span class="line">print(env.observation_space)</span><br><span class="line"><span class="comment">#&gt; Box(4,)</span></span><br></pre></td></tr></table></figure><pre><code>[33mWARN: gym.spaces.Box autodetected dtype as &lt;class &apos;numpy.float32&apos;&gt;. Please provide explicit dtype.[0mDiscrete(2)Box(4,)</code></pre><p>从程序运行结果来看</p><ul><li><p><code>action_space</code> 是一个离散 <code>Discrete</code> 类型，从 <a href="https://github.com/openai/gym/blob/master/gym/spaces/discrete.py" target="_blank" rel="noopener">discrete.py</a> 源码可知，范围是一个 <code>{0,1,...,n-1}</code> 长度为 <code>n</code> 的非负整数集合，在 <code>CartPole-v0</code> 例子中，动作空间表示为 <code>{0,1}</code>。</p></li><li><p><code>observation_space</code> 是一个 <code>Box</code> 类型，从 <a href="https://github.com/openai/gym/blob/master/gym/spaces/box.py" target="_blank" rel="noopener">box.py</a> 源码可知，表示一个 <code>n</code> 维的盒子，所以在上一节打印出来的 <code>observation</code> 是一个长度为 4 的数组。数组中的每个元素都具有上下界。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(env.observation_space.high)</span><br><span class="line">print(env.observation_space.low)</span><br></pre></td></tr></table></figure><pre><code>[4.8000002e+00 3.4028235e+38 4.1887903e-01 3.4028235e+38][-4.8000002e+00 -3.4028235e+38 -4.1887903e-01 -3.4028235e+38]</code></pre><p>利用运动空间和观测空间的定义和范围，可以将代码写得更加通用。在许多仿真环境中，<code>Box</code> 和 <code>Discrete</code> 是最常见的空间描述，在智体每次执行动作时，都属于这些空间范围内，代码示例为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gym <span class="keyword">import</span> spaces</span><br><span class="line">space = spaces.Discrete(<span class="number">8</span>) <span class="comment"># Set with 8 elements &#123;0, 1, 2, ..., 7&#125;</span></span><br><span class="line">x = space.sample()</span><br><span class="line">print(space.contains(x)) </span><br><span class="line">print(space.n == <span class="number">8</span>)</span><br></pre></td></tr></table></figure><pre><code>TrueTrue</code></pre><p>在 <code>CartPole-v0</code> 栗子中，运动只能选择左和右，分别用 <code>{0,1}</code> 表示</p><h2 id="Gym-中可用的环境"><a href="#Gym-中可用的环境" class="headerlink" title="Gym 中可用的环境"></a>Gym 中可用的环境</h2><p>Gym 中从简单到复杂，包含了许多经典的<a href="https://gym.openai.com/envs/#classic_control" target="_blank" rel="noopener">仿真环境</a>和各种数据，其中包括</p><ul><li><p>经典控制和文字游戏：经典的强化学习示例，方便入门；</p></li><li><p>算法：从例子中学习强化学习的相关算法，在 Gym 的仿真算法中，由易到难方便新手入坑；</p></li><li><p>雅达利游戏：利用强化学习来玩雅达利的游戏。Gym 中集成了对强化学习有着重要影响的 <a href="http://www.arcadelearningenvironment.org/" target="_blank" rel="noopener">Arcade Learning Environment</a>，并且方便用户安装；</p></li><li><p>2D 和 3D 的机器人：这个是我一直很感兴趣的一部分，在 Gym 中控制机器人进行仿真。需要利用第三方的物理引擎如 <code>MuJoCo</code> 。</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fto4z7mno0j20oa0ikqbs.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><p>Gym 是一个包含各种各样强化学习仿真环境的大集合，并且封装成通用的接口暴露给用户，查看所有环境的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gym <span class="keyword">import</span> envs</span><br><span class="line">print(envs.registry.all())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_values([EnvSpec(Copy-v0), EnvSpec(RepeatCopy-v0), EnvSpec(ReversedAddition-v0), EnvSpec(ReversedAddition3-v0), EnvSpec(DuplicatedInput-v0), EnvSpec(Reverse-v0), EnvSpec(CartPole-v0), EnvSpec(CartPole-v1), EnvSpec(MountainCar-v0), EnvSpec(MountainCarContinuous-v0), EnvSpec(Pendulum-v0), EnvSpec(Acrobot-v1), EnvSpec(LunarLander-v2), EnvSpec(LunarLanderContinuous-v2), EnvSpec(BipedalWalker-v2),...</span><br></pre></td></tr></table></figure><p>Gym 支持将用户制作的环境写入到注册表中，需要执行 <code>gym.make()</code> 和在启动时注册 <code>register</code>，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">register(</span><br><span class="line">    id=<span class="string">'CartPole-v0'</span>,</span><br><span class="line">    entry_point=<span class="string">'gym.envs.classic_control:CartPoleEnv'</span>,</span><br><span class="line">    max_episode_steps=<span class="number">200</span>,</span><br><span class="line">    reward_threshold=<span class="number">195.0</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://gym.openai.com/docs/" target="_blank" rel="noopener">https://gym.openai.com/docs/</a></p></li><li><p><a href="https://nndl.github.io/" target="_blank" rel="noopener">https://nndl.github.io/</a> </p></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>emmmm … 第一篇强化学习入坑笔记写完，大多是从官方文档看过来的加上了一点点自己的理解，建议文档这东西还是直接看官方的吧，原汁原味</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><ul><li>神奇的战士</li><li>博客：<a href="http://thinkhard.tech/" target="_blank" rel="noopener">http://thinkhard.tech/</a></li><li>Github: <a href="https://github.com/wangshub" target="_blank" rel="noopener">https://github.com/wangshub</a></li><li>微信公众号：<strong>舒林笑笑生</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器人强化学习之使用-OpenAI-Gym-教程与笔记&quot;&gt;&lt;a href=&quot;#机器人强化学习之使用-OpenAI-Gym-教程与笔记&quot; class=&quot;headerlink&quot; title=&quot;机器人强化学习之使用 OpenAI Gym 教程与笔记&quot;&gt;&lt;/a&gt;机器人强化
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器人强化学习笔记（0）</title>
    <link href="http://wangshub.github.io/2018/07/03/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangshub.github.io/2018/07/03/强化学习笔记/</id>
    <published>2018-07-03T14:34:36.000Z</published>
    <updated>2018-07-08T02:49:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="机器人强化学习笔记（0）"><a href="#机器人强化学习笔记（0）" class="headerlink" title="机器人强化学习笔记（0）"></a>机器人强化学习笔记（0）</h1><h2 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fsx1t71czwj20lc0dkdjg.jpg" alt="Machine Learning" title="">                </div>                <div class="image-caption">Machine Learning</div>            </figure><h2 id="强化学习问题"><a href="#强化学习问题" class="headerlink" title="强化学习问题"></a>强化学习问题</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fsx1s6yxgsj20c204vjrh.jpg" alt="RL problem" title="">                </div>                <div class="image-caption">RL problem</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fsx1xqsh7ij20c204v0t0.jpg" alt="Child walk" title="">                </div>                <div class="image-caption">Child walk</div>            </figure><ul><li><strong>监督学习</strong>：监督学习由任务驱动，需要创造外部的“导师”，“导师”拥有外部环境的所有先验信息，并教导 Agent 完成特定的任务。但是 Agent 可以用很多种子任务相结合的方式去完成相同的任务。所以创造一个全能的“导师”来训练 Agent 在实际中几乎是不可能的。</li><li><strong>非监督学习</strong>：非监督学习是由数据驱动，主要目的是找到底层的模式而不是映射关系。例如给用户推荐新闻时，非监督学习主要是根据用户先前阅读过的新闻来推荐相似的新闻。</li><li><strong>强化学习</strong>：和上面两种方法相比较，强化学习主要是从自身的经验来获取知识，在输入和输出之间存在着映射关系。强化学习将奖励函数作为行为的反馈。</li></ul><h2 id="解决强化学习问题的框架和算法"><a href="#解决强化学习问题的框架和算法" class="headerlink" title="解决强化学习问题的框架和算法"></a>解决强化学习问题的框架和算法</h2><p>强化学习需要平衡 <strong>exploration vs exploitation</strong> 困境。</p><h3 id="马尔可夫决策过程-Markov-Decision-Process"><a href="#马尔可夫决策过程-Markov-Decision-Process" class="headerlink" title="马尔可夫决策过程(Markov Decision Process)"></a>马尔可夫决策过程(Markov Decision Process)</h3><p>在强化学习场景下，数学模型为马尔可夫决策过程，表示为</p><ul><li>状态集合：S</li><li>动作集合：A</li><li>奖励函数：R</li><li>策略：Pi</li><li>值：V</li></ul><p>从起始状态到结束状态$S$需要经过动作集合 A。执行每个动作后，都会获得奖励 R，每个动作可能会导致好的或者坏的奖励函数值。策略(Policy)就是采取某个系列动作的方法，并且会相应的得到奖励函数的值。因此，求解强化学习的目标就是要选取最佳策略(Policy)，在所有可能的状态和时间范围内使得评估函数最大，即</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1ft298te49zj203001c0si.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="最短路径问题-Shortest-Path-Problem"><a href="#最短路径问题-Shortest-Path-Problem" class="headerlink" title="最短路径问题(Shortest Path Problem)"></a>最短路径问题(Shortest Path Problem)</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fsx3dp18t2j20md0bq74c.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>求解以最小代价，从地点 A 到地点 F 的最短路径问题，转化为</p><ul><li>节点集合 {A, B, C, D, E, F}</li><li>从点到点移动成为动作，{A-&gt;B, C-&gt;D}</li><li>奖励函数为每条边的花费</li><li>完成 A 点到 F 行走路线成为策略，如 {A-&gt;B-&gt;D-&gt;F}</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;机器人强化学习笔记（0）&quot;&gt;&lt;a href=&quot;#机器人强化学习笔记（0）&quot; class=&quot;headerlink&quot; title=&quot;机器人强化学习笔记（0）&quot;&gt;&lt;/a&gt;机器人强化学习笔记（0）&lt;/h1&gt;&lt;h2 id=&quot;机器学习分类&quot;&gt;&lt;a href=&quot;#机器学习分类&quot;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://wangshub.github.io/tags/Python/"/>
    
      <category term="Reinforment Learning" scheme="http://wangshub.github.io/tags/Reinforment-Learning/"/>
    
  </entry>
  
  <entry>
    <title>效率工具网站推荐</title>
    <link href="http://wangshub.github.io/2018/06/09/%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    <id>http://wangshub.github.io/2018/06/09/工具网站推荐/</id>
    <published>2018-06-09T01:58:48.000Z</published>
    <updated>2018-07-27T02:34:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提升生活品质——个人效率工具与资讯网站推荐"><a href="#提升生活品质——个人效率工具与资讯网站推荐" class="headerlink" title="提升生活品质——个人效率工具与资讯网站推荐"></a>提升生活品质——个人效率工具与资讯网站推荐</h1><ul><li>这个世界上软件太多，懂你的工具太少；</li><li>我是个工具控，经常搜集和自己写一些工具和插件来提高生活品质；</li><li>本文将持续更新和记录我平时工作中<strong>重度使用</strong>的一些效率工具和网站；</li></ul><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="Emacs"><a href="#Emacs" class="headerlink" title="Emacs"></a>Emacs</h3><ul><li>地址：<a href="https://github.com/syl20bnr/spacemacs" target="_blank" rel="noopener">https://github.com/syl20bnr/spacemacs</a></li><li>推荐指数：⭐️⭐️⭐️⭐️⭐️</li><li>目前用到 Emacs 最多的功能就是 Org mode，用于平时的想法收集、思路整理、任务分配。Emacs 功能实在强大，任何能想到的功能基本上都有插件，但是刚开始上手会非常不习惯。要想全面掌握，还是要看一些 Lisp。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fs476peynoj20o80d2tcb.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Org-mode"><a href="#Org-mode" class="headerlink" title="Org mode"></a>Org mode</h3><ul><li>地址：<a href="https://orgmode.org/" target="_blank" rel="noopener">https://orgmode.org/</a></li><li>推荐指数：⭐️⭐️⭐️⭐️⭐️</li><li>鉴于 Org mode 实在是太好用了，所以再单独推荐一次。Org mode 是基于节点的结构，利用它可以实现脑图的功能，而且还可以设置每个节点的状态。大多数人(包括我)都是将它作为 GTD 工具来使用，或者可以用来写博客文章。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fs479c7cbej20du0ab0vt.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Brook"><a href="#Brook" class="headerlink" title="Brook"></a>Brook</h3><ul><li>地址：<a href="https://github.com/txthinking/brook" target="_blank" rel="noopener">https://github.com/txthinking/brook</a></li><li>推荐指数：⭐️⭐️⭐️⭐️</li><li>Brook 是一个跨平台的代理工具，作者编译出了各个平台的 Release，在我试过 Brook 协议后，一下子被惊艳到了，代理速度十分惊艳，瞬间我的龟速服务器焕发青春。本来想给 Brook 五星的，但是由于目前它的客户端还不太完善，偶尔存在服务端退出的问题。后续还会持续关注该项目。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fs47ar7actj20k10dhabc.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><ul><li>地址：<a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></li><li>推荐指数：⭐️⭐️⭐️⭐️</li><li>像我这种 Markdown 业余程序员，写的最多很多时候却是文档。Typora 是一个精而美的开源跨平台 Markdown 编辑器，支持 MacOS 、Windows、Linux，对 Markdown 渲染是我见过较为漂亮的，输入的体验也超级棒，同时还可以输出 Pdf 文件。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fs47btl76vj20mx0gcq57.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><ul><li>地址：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></li><li>推荐指数：⭐️⭐️⭐️⭐️⭐️</li><li>一个开源免费图床上传工具，PicGo 目前支持了微博图床，七牛图床，腾讯云 COS v4\v5版本，又拍云，GitHub，SM.MS 图床，支持 MacOS、Windows 64位（v1.3.0以上）系统。在写 Markdown 文档时，复制截图插入到文件真是超级方便。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fs47cqhkdxj218e0p0kjl.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Cerebro"><a href="#Cerebro" class="headerlink" title="Cerebro"></a>Cerebro</h3><ul><li>地址：<a href="https://github.com/KELiON/cerebro" target="_blank" rel="noopener">https://github.com/KELiON/cerebro</a></li><li>推荐指数：⭐️⭐️⭐️⭐️</li><li>一个开源免费的对话式快速启动工具，支持 MacOs、Windows、Linux。目前我在 MacOs 下面切换窗口启动软件都离不开这个工具，还为 Cerebro 写了很多插件。当然类似的工具还有 Alfred 和 Wox 等，但是一个能自己随心所欲修改的软件才是好软件，对吧？</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cloud.githubusercontent.com/assets/594298/20180624/858a483a-a75b-11e6-94a1-ef1edc4d95c3.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="ShareMouse"><a href="#ShareMouse" class="headerlink" title="ShareMouse"></a>ShareMouse</h3><ul><li>地址：<a href="http://www.keyboard-and-mouse-sharing.com/" target="_blank" rel="noopener">http://www.keyboard-and-mouse-sharing.com/</a></li><li>推荐指数：⭐️⭐️⭐️⭐️</li><li>如果你需要在不同系统和电脑之间共享同一个键盘鼠标的话，ShareMouse 可能就是完美地解决方案，但是需要收费。相对于 Synergy，可以在不同窗口之间拖拽和复制文件，美中不足的是需要收费不开源。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fs47ed6llqj20hq06yaa4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Fish-Shell"><a href="#Fish-Shell" class="headerlink" title="Fish Shell"></a>Fish Shell</h3><ul><li>地址：<a href="https://fishshell.com/" target="_blank" rel="noopener">https://fishshell.com/</a></li><li>推荐指数：⭐️⭐️⭐️⭐️</li><li>相较于 Zsh Shell，我认为 Fish 在配置上面更人性化一些，但是有一个槽点就是对 Bash 的指令不完全兼容。推荐使用 Oh-my-fish 和 Fisherman 来进行 Fish 的插件管理。推荐 <code>主题 Agnoster</code> + <code>配色 Dracula</code>，好看到没朋友。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fs47g5r1lej20l9092jtb.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="资讯网站"><a href="#资讯网站" class="headerlink" title="资讯网站"></a>资讯网站</h2><h3 id="Github-每日-Trending"><a href="#Github-每日-Trending" class="headerlink" title="Github 每日 Trending"></a><a href="https://github.com/trending" target="_blank" rel="noopener">Github 每日 Trending</a></h3><ul><li><strong>地址</strong>: <a href="https://github.com/trending" target="_blank" rel="noopener">https://github.com/trending</a></li><li>推荐指数：⭐️⭐️⭐️⭐️⭐️</li><li>每天必须要浏览一遍，能上 Github Trending 的项目，必定存在着创意和骚操作（有幸上过两次月榜）。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fs47hj5jl8j20k30f60ug.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="Hacker-News"><a href="#Hacker-News" class="headerlink" title="Hacker News"></a><a href="https://news.ycombinator.com/" target="_blank" rel="noopener">Hacker News</a></h2><ul><li>地址：<a href="https://news.ycombinator.com/" target="_blank" rel="noopener">https://news.ycombinator.com/</a></li><li>推荐指数：⭐️⭐️⭐️⭐️⭐️</li><li>在 Hacker News 热榜上面的新闻，绝对算得上技术界的大新闻，强烈值得每日浏览(需要梯子)。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fs47iearlnj20en08wgle.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>工具或者软件，适合自己才是最好的。单纯的夸耀某某语言或者 IDE 是最好的，实在没有太大的必要。</p><p>一些技术新闻资讯，还是建议多看英文的原文链接，很多中文的营销号只是粗略的翻译和转载，在这个过程中，原有的信息可能发生扭曲和丢失，实在像被人咀嚼过的甘蔗，没有太多的营养。</p><p>最后欢迎关注我的微信公众号：<strong>舒林笑笑生</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fs47krv4owj2076076t9i.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;提升生活品质——个人效率工具与资讯网站推荐&quot;&gt;&lt;a href=&quot;#提升生活品质——个人效率工具与资讯网站推荐&quot; class=&quot;headerlink&quot; title=&quot;提升生活品质——个人效率工具与资讯网站推荐&quot;&gt;&lt;/a&gt;提升生活品质——个人效率工具与资讯网站推荐&lt;/
      
    
    </summary>
    
    
      <category term="Tool" scheme="http://wangshub.github.io/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>Python抖音机器人，论如何在抖音上找到漂亮小姐姐？</title>
    <link href="http://wangshub.github.io/2018/05/28/Python%E6%8A%96%E9%9F%B3%E6%9C%BA%E5%99%A8%E4%BA%BA%EF%BC%8C%E8%AE%BA%E5%A6%82%E4%BD%95%E5%9C%A8%E6%8A%96%E9%9F%B3%E4%B8%8A%E6%89%BE%E5%88%B0%E6%BC%82%E4%BA%AE%E5%B0%8F%E5%A7%90%E5%A7%90%EF%BC%9F/"/>
    <id>http://wangshub.github.io/2018/05/28/Python抖音机器人，论如何在抖音上找到漂亮小姐姐？/</id>
    <published>2018-05-28T06:38:32.000Z</published>
    <updated>2018-05-28T07:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在抖音上找到漂亮小姐姐—-抖音机器人"><a href="#如何在抖音上找到漂亮小姐姐—-抖音机器人" class="headerlink" title="如何在抖音上找到漂亮小姐姐—-抖音机器人"></a>如何在抖音上找到漂亮小姐姐—-抖音机器人</h1><p>最近沉迷于抖音无法自拔，常常花好几个小时在抖音<strong>漂亮小姐姐</strong>身上。</p><p>为了<strong>高效、直接</strong>地找到漂亮小姐姐，我用 Python + ADB 做了一个 Python 抖音机器人 Douyin-Bot。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/wangshub/Douyin-Bot/raw/master/screenshot/demo.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li style="list-style: none"><input type="checkbox" checked> <strong>自动翻页</strong></li><li style="list-style: none"><input type="checkbox" checked> <strong>颜值检测</strong></li><li style="list-style: none"><input type="checkbox" checked> <strong>人脸识别</strong></li><li style="list-style: none"><input type="checkbox" checked> <strong>自动点赞</strong></li><li style="list-style: none"><input type="checkbox" checked> <strong>自动关注</strong></li><li style="list-style: none"><input type="checkbox" checked> 随机防 Ban</li><li style="list-style: none"><input type="checkbox"> 自动回复</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>打开《抖音短视频》APP，进入主界面</li><li>获取手机截图，并对截图进行压缩 (Size &lt; 1MB)；</li><li>请求 <a href="http://ai.qq.com/" target="_blank" rel="noopener">人脸识别 API</a>；</li><li>解析返回的人脸 Json 信息，对人脸检测切割；</li><li>当颜值大于门限值 <code>BEAUTY_THRESHOLD</code>时，点赞并关注；</li><li>下一页，返回第一步；</li></ul><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><ul><li>相关软件工具安装和使用步骤请参考 <a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">wechat_jump_game</a> 和 <a href="https://github.com/wangshub/wechat_jump_game/wiki/Android-%E5%92%8C-iOS-%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4" target="_blank" rel="noopener">Android 和 iOS 操作步骤</a></li></ul><ol><li>获取源码：<code>git clone https://github.com/wangshub/Douyin-Bot.git</code></li><li>进入源码目录： <code>cd Douyin-Bot</code></li><li>安装依赖： <code>pip install -r requirements.txt</code></li><li>运行程序：<code>python douyin-bot.py</code></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>目前暂时只适配了 一加5(1920x1080 分辨率)，如果手机不是该分辨率，请修改 <code>config/</code> 文件夹下面的配置文件；</li></ul><h2 id="脸部截取"><a href="#脸部截取" class="headerlink" title="脸部截取"></a>脸部截取</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/wangshub/Douyin-Bot/raw/master/screenshot/faces.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h2><p>MIT</p><p>欢迎 Star 和 Fork ~</p><p><strong>项目地址:</strong><a href="https://github.com/wangshub/Douyin-Bot" target="_blank" rel="noopener">https://github.com/wangshub/Douyin-Bot</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何在抖音上找到漂亮小姐姐—-抖音机器人&quot;&gt;&lt;a href=&quot;#如何在抖音上找到漂亮小姐姐—-抖音机器人&quot; class=&quot;headerlink&quot; title=&quot;如何在抖音上找到漂亮小姐姐—-抖音机器人&quot;&gt;&lt;/a&gt;如何在抖音上找到漂亮小姐姐—-抖音机器人&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://wangshub.github.io/tags/Python/"/>
    
      <category term="ADB" scheme="http://wangshub.github.io/tags/ADB/"/>
    
  </entry>
  
  <entry>
    <title>给博客网站加个球(访客统计)</title>
    <link href="http://wangshub.github.io/2018/05/20/%E7%BB%99%E5%8D%9A%E5%AE%A2%E5%8A%A0%E4%B8%AA%E7%90%83-%E8%AE%BF%E5%AE%A2%E7%BB%9F%E8%AE%A1/"/>
    <id>http://wangshub.github.io/2018/05/20/给博客加个球-访客统计/</id>
    <published>2018-05-20T09:09:18.000Z</published>
    <updated>2018-05-20T09:31:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="给博客网站加个球-访客统计脚本"><a href="#给博客网站加个球-访客统计脚本" class="headerlink" title="给博客网站加个球-访客统计脚本"></a>给博客网站加个球-访客统计脚本</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1frhx77kz3yj20dg0autd0.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>最近无意中发现了 Revolvermaps 这个网站，可以对网站页面上的访客进行统计。</p><h2 id="Demo-演示"><a href="#Demo-演示" class="headerlink" title="Demo 演示"></a>Demo 演示</h2><p><strong><a href="http://thinkhard.tech/" target="_blank" rel="noopener">神奇的战士的博客</a></strong></p><h2 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h2><ul><li>访客 IP 地点统计；</li><li>访客人数统计；</li><li>页面停留时间统计；</li><li>多样式定制；</li><li>免费、易使用；</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li>访问 <a href="https://www.revolvermaps.com/" target="_blank" rel="noopener">https://www.revolvermaps.com</a></li><li>复制脚本代码</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1frhxg9k3n0j20n90a3wg1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>插入到博客网站中的 Html；</li></ul><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><ul><li>过去 24 小时访客统计</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1frhxjg7qa3j20kb0lomyp.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>不同地区统计</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1frhxkeoz6qj20kj0fd408.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>各地区访问人数</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1frhxlcmny8j20gp0di0z1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>各个地区的访问时间</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1frhxmixiqbj20kl0gkn63.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote><p>Happy 520 Day ~</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;给博客网站加个球-访客统计脚本&quot;&gt;&lt;a href=&quot;#给博客网站加个球-访客统计脚本&quot; class=&quot;headerlink&quot; title=&quot;给博客网站加个球-访客统计脚本&quot;&gt;&lt;/a&gt;给博客网站加个球-访客统计脚本&lt;/h1&gt;&lt;figure class=&quot;image-
      
    
    </summary>
    
    
      <category term="Blog" scheme="http://wangshub.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>使用Emacs进行日程管理（GTD）</title>
    <link href="http://wangshub.github.io/2018/05/13/%E4%BD%BF%E7%94%A8Emacs%E8%BF%9B%E8%A1%8C%E6%97%A5%E7%A8%8B%E7%AE%A1%E7%90%86%EF%BC%88GTD%EF%BC%89/"/>
    <id>http://wangshub.github.io/2018/05/13/使用Emacs进行日程管理（GTD）/</id>
    <published>2018-05-13T06:19:22.000Z</published>
    <updated>2018-05-20T09:06:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Emacs-进行日程管理-GTD"><a href="#使用-Emacs-进行日程管理-GTD" class="headerlink" title="使用 Emacs 进行日程管理 (GTD)"></a>使用 Emacs 进行日程管理 (GTD)</h1><h2 id="什么是-GTD"><a href="#什么是-GTD" class="headerlink" title="什么是 GTD ?"></a>什么是 GTD ?</h2><blockquote><p>Your mind is for having ideas, not holding them. — David Allen</p></blockquote><p><strong>GTD</strong> (Getting Things Done) 是一个组织和跟进任务或待办事项的系统架构，但是它的目标要高于仅仅是将事情做完，而是要将待办事项以一个更好的方式完成。GTD 的目标是让人 100% 地相信 GTD 的系统来收集任务、想法。这样才能卸下记忆这些想法的思想包袱，专注的完成当下的任务。GTD 将所有的事情罗列下来，然后再进行分类，你就能从一个比较宏观的角度来看待这一堆问题，并且确定下一步的处理方法，将所有悬而未决的事情尽量地处于我们个人的掌握之中。</p><p>更多关于 GTD 方法的介绍可以参考 <a href="https://gettingthingsdone.com/" target="_blank" rel="noopener">David Allen</a> 的博客和相关书籍。</p><p>理论就介绍到这里了，目前市面上有许许多多在各种平台上收费 GTD 任务管理软件、也有许多开源免费的软件，如</p><ul><li><a href="Taskwarrior - What&#39;s next?">Taskwarrior</a></li><li><a href="Todo.txt: Future-proof task tracking in a file you control" target="_blank" rel="noopener">Todo.txt</a></li><li><a href="https://orgmode.org/" target="_blank" rel="noopener">Emacs Org-mode</a></li><li>…</li></ul><p>今天主要 Show 一下在 Emacs 中使用 Org-mode 来记录、分类、保存、跟进我的想法和任务</p><p><strong>主要特点</strong></p><ul><li>基于 Spacemacs 功能强大；</li><li>操作难度较大，可定制性强；</li><li>利用 Git 工具定期自动备份笔记；</li></ul><h2 id="Emacs-插件安装步骤"><a href="#Emacs-插件安装步骤" class="headerlink" title="Emacs 插件安装步骤"></a>Emacs 插件安装步骤</h2><p>项目地址：<a href="https://github.com/carlos-wong/org-agenda-carlos" target="_blank" rel="noopener">https://github.com/carlos-wong/org-agenda-carlos</a></p><h2 id="在-Emacs-中进行日程管理"><a href="#在-Emacs-中进行日程管理" class="headerlink" title="在 Emacs 中进行日程管理"></a>在 Emacs 中进行日程管理</h2><p>安装并配置好插件后，使用时主要分三步：<strong>录入、显示、保存</strong>。</p><h3 id="Todo-录入"><a href="#Todo-录入" class="headerlink" title="Todo 录入"></a>Todo 录入</h3><p>绑定输入快捷键：<code>F7</code><br>绑定显示快捷键：<code>F6</code></p><ul><li>选择 Todo 类型</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1frhv25t2b7j20b505a0sq.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>输入事项</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1frhv5kx5hwj20ea02jt8v.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>安排节点</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1frhvn7ahrqj20eb02iaac.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Todo-显示"><a href="#Todo-显示" class="headerlink" title="Todo 显示"></a>Todo 显示</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1frhva450zgj20ud0dz427.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>现在，每天打开 Emacs 的第一件事就是看今天的 Org ,又有做不完的事情了 ~  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用-Emacs-进行日程管理-GTD&quot;&gt;&lt;a href=&quot;#使用-Emacs-进行日程管理-GTD&quot; class=&quot;headerlink&quot; title=&quot;使用 Emacs 进行日程管理 (GTD)&quot;&gt;&lt;/a&gt;使用 Emacs 进行日程管理 (GTD)&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Emacs" scheme="http://wangshub.github.io/tags/Emacs/"/>
    
      <category term="Lisp" scheme="http://wangshub.github.io/tags/Lisp/"/>
    
  </entry>
  
  <entry>
    <title>开源跨平台效率软件Cerebro</title>
    <link href="http://wangshub.github.io/2018/04/30/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%95%88%E7%8E%87%E8%BD%AF%E4%BB%B6Cerebro/"/>
    <id>http://wangshub.github.io/2018/04/30/跨平台效率软件Cerebro/</id>
    <published>2018-04-30T12:26:25.000Z</published>
    <updated>2018-04-30T13:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开源跨平台效率软件Cerebro"><a href="#开源跨平台效率软件Cerebro" class="headerlink" title="开源跨平台效率软件Cerebro"></a>开源跨平台效率软件Cerebro</h1><!-- TOC --><ul><li><a href="#%E5%BC%80%E6%BA%90%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%95%88%E7%8E%87%E8%BD%AF%E4%BB%B6cerebro">开源跨平台效率软件Cerebro</a><ul><li><a href="#%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7">主要特性</a></li><li><a href="#%E5%8A%9F%E8%83%BD%E5%B1%95%E7%A4%BA">功能展示</a><ul><li><a href="#%08%E5%BA%94%E7%94%A8%E4%B8%8E%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2">应用与文件搜索</a></li><li><a href="#%E5%9F%BA%E4%BA%8E-electron%EF%BC%8C%E4%BB%80%E4%B9%88%E9%83%BD%E8%83%BD%E7%9C%8B">基于 Electron，什么都能看</a></li><li><a href="#%E6%98%93%E4%B8%8A%E6%89%8B%E7%9A%84%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91">易上手的插件开发</a></li></ul></li><li><a href="#%08%E6%8F%92%E4%BB%B6%E5%B1%95%E7%A4%BA">插件展示</a></li><li><a href="#%E6%88%91%E4%BB%AC%E5%86%99%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8F%92%E4%BB%B6">我们写的一些插件</a><ul><li><a href="#cerebro-torrent">Cerebro-torrent</a></li><li><a href="#cerebro-codelf">Cerebro-codelf</a></li></ul></li><li><a href="#%E7%BB%93%E8%AF%AD">结语</a></li></ul></li></ul><!-- /TOC --><p>在 Mac 下面有很多制作精美的第三方软件，其中就有大名鼎鼎的效率神器 <a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred</a> 。但是只能在 Mac 下面才能使用，而且收费不开源。</p><p>今天隆重介绍一下另一款大杀器 <a href="https://github.com/KELiON/cerebro" target="_blank" rel="noopener">Cerebro</a> 以及我是如何在平时工作学习中使用它提升效率的。</p><p>不同于菜单，Ui 交互的工作方式，类似接自然对话的交互方式，这类对话式的操作软件还是有不少项目，但是跨平台、插件开发来说 Cerebro 是比较出色的，毕竟一个能让自己任意修改的软件才是好软件。@<a href="https://github.com/carlos-wong" target="_blank" rel="noopener">carlos-wong</a></p><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul><li>美好的生活从 <code>Ctrl-Space</code> 开始；</li><li>App 快速启动；</li><li>电脑文件搜索；</li><li>基于 <strong>JavaScript</strong>, 一定要试试自己写插件；</li><li>跨平台 Mac、Windows、Linux；</li><li>做你能想到的任何事；</li></ul><p>理论上 Alfred 能做的事情，Cerebro 同样能做到，更重要的是 <strong>跨平台开源免费！</strong>、<strong>跨平台开源免费！</strong>、<strong>跨平台开源免费！</strong></p><h2 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h2><h3 id="应用与文件搜索"><a href="#应用与文件搜索" class="headerlink" title="应用与文件搜索"></a>应用与文件搜索</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fquyzyes0jj20rs0pln0z.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="基于-Electron，什么都能看"><a href="#基于-Electron，什么都能看" class="headerlink" title="基于 Electron，什么都能看"></a>基于 Electron，什么都能看</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fquz6vi2f2j20rs0ll11s.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="易上手的插件开发"><a href="#易上手的插件开发" class="headerlink" title="易上手的插件开发"></a>易上手的插件开发</h3><p>如果你正好是 JavaScript 的爱好者的话，这款软件绝对是你的大杀器，Cerebro 的插件是同类软件中最容易上手开发的。只需要遵从 <a href="https://github.com/KELiON/cerebro/blob/master/docs/plugins.md" target="_blank" rel="noopener">Cerebro API</a> ，如果你连文档都懒得看的话，个人建议直接从插件列表 <a href="https://github.com/lubien/awesome-cerebro" target="_blank" rel="noopener">Awesome-cerebro</a> 选一个改成你想要的样子就行，开源就是这么有魅力！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fquz8pmuunj20rs0inn7m.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="插件展示"><a href="#插件展示" class="headerlink" title="插件展示"></a>插件展示</h2><ul><li>密码管理</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/maximbaz/cerebro-pass/raw/master/docs/screenshot.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>执行 Shell 命令</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/KELiON/cerebro-shell/raw/master/screenshot.gif" alt="shell" title="">                </div>                <div class="image-caption">shell</div>            </figure><ul><li>搜索 npm 包</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/JordanAdams/cerebro-npm/master/.github/screenshot.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>生成二维码</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/LaercioSantana/cerebro-qrcode/raw/master/cerebro-qrcode.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>搜索 Emoji 表情</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/KELiON/cerebro-emoj/raw/master/screenshot.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>更多插件列表 <a href="https://github.com/lubien/awesome-cerebro" target="_blank" rel="noopener">Awesome-cerebro</a></li></ul><h2 id="我们写的一些插件"><a href="#我们写的一些插件" class="headerlink" title="我们写的一些插件"></a>我们写的一些插件</h2><h3 id="Cerebro-torrent"><a href="#Cerebro-torrent" class="headerlink" title="Cerebro-torrent"></a>Cerebro-torrent</h3><ul><li><a href="https://github.com/wangshub" target="_blank" rel="noopener">我</a>写的种子搜片儿神器 <a href="https://github.com/wangshub/cerebro-torrent" target="_blank" rel="noopener">Cerebro-torrent</a><blockquote><p>看个片儿还要打开网页慢慢找?！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/wangshub/cerebro-torrent/raw/master/resource/magnet_demo_2M.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></blockquote></li></ul><h3 id="Cerebro-codelf"><a href="#Cerebro-codelf" class="headerlink" title="Cerebro-codelf"></a>Cerebro-codelf</h3><ul><li><a href="https://github.com/carlos-wong" target="_blank" rel="noopener">@carlos-wong</a> 制作快速地变量名搜索神器 <a href="https://github.com/carlos-wong/cerebro-codelf" target="_blank" rel="noopener">Cerebro-codelf</a><blockquote><p>给变量起名的事情上，为你生命省 3s</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/carlos-wong/cerebro-codelf/raw/master/res/screenshot.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></blockquote></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你生活中存在着一些机械重复的劳动的话，比如煮个咖啡、回复相同内容的邮件、打开特定的网页等等，完全可以写成 Cerebro 插件提升效率，而节省下来的时间再用来改进工具，形成正循环！</p><p>欢迎入坑 ~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开源跨平台效率软件Cerebro&quot;&gt;&lt;a href=&quot;#开源跨平台效率软件Cerebro&quot; class=&quot;headerlink&quot; title=&quot;开源跨平台效率软件Cerebro&quot;&gt;&lt;/a&gt;开源跨平台效率软件Cerebro&lt;/h1&gt;&lt;!-- TOC --&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://wangshub.github.io/tags/JavaScript/"/>
    
      <category term="Cerebro" scheme="http://wangshub.github.io/tags/Cerebro/"/>
    
  </entry>
  
  <entry>
    <title>cerebro-codelf给变量起名的事情上，为你生命省3s</title>
    <link href="http://wangshub.github.io/2018/04/30/cerebro-codelf%E7%BB%99%E5%8F%98%E9%87%8F%E8%B5%B7%E5%90%8D%E7%9A%84%E4%BA%8B%E6%83%85%E4%B8%8A%EF%BC%8C%E4%B8%BA%E4%BD%A0%E7%94%9F%E5%91%BD%E7%9C%813s/"/>
    <id>http://wangshub.github.io/2018/04/30/cerebro-codelf给变量起名的事情上，为你生命省3s/</id>
    <published>2018-04-30T12:11:27.000Z</published>
    <updated>2018-04-30T12:13:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cerebro-codelf"><a href="#cerebro-codelf" class="headerlink" title="cerebro-codelf"></a>cerebro-codelf</h1><blockquote><p>There are only two hard things in Computer Science: cache invalidation and naming things. – Phil Karlton</p><p>给变量起名的事情上，为你生命省 <strong>3s</strong>。</p></blockquote><p><strong><a href="https://github.com/KELiON/cerebro.git" target="_blank" rel="noopener">Cerebro</a> 变量名搜索插件</strong>，项目灵感来源 <a href="https://unbug.github.io/codelf/" target="_blank" rel="noopener">codelf</a>。通过 Cerebro 的搜索窗口快速查找变量名。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>快速启动、搜索</li><li>中英文搜索</li><li>自由定制</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/carlos-wong/cerebro-codelf/raw/master/res/screenshot.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>插件依赖于 <a href="https://github.com/KELiON/cerebro.git" target="_blank" rel="noopener">Cerebro</a></li><li><code>Ctrl-Space</code> 打开 Cerebro</li><li>输入 <code>plugins codelf</code>，点击安装</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>Cerebro 中，输入 <code>codelf</code> + <code>[待搜索的变量名]</code>；</li><li>上下选择变量名，敲回车 <code>Enter</code> 复制到剪切板；</li></ul><h2 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h2><p>MIT</p><p>项目地址 <a href="https://github.com/carlos-wong/cerebro-codelf" target="_blank" rel="noopener">https://github.com/carlos-wong/cerebro-codelf</a>  </p><p>欢迎 fork :fork_and_knife: 和 star :star:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;cerebro-codelf&quot;&gt;&lt;a href=&quot;#cerebro-codelf&quot; class=&quot;headerlink&quot; title=&quot;cerebro-codelf&quot;&gt;&lt;/a&gt;cerebro-codelf&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;There are
      
    
    </summary>
    
    
      <category term="JacaScript" scheme="http://wangshub.github.io/tags/JacaScript/"/>
    
      <category term="Cerebro" scheme="http://wangshub.github.io/tags/Cerebro/"/>
    
  </entry>
  
  <entry>
    <title>python插件式爬虫</title>
    <link href="http://wangshub.github.io/2018/04/25/python%E6%8F%92%E4%BB%B6%E5%BC%8F%E7%88%AC%E8%99%AB/"/>
    <id>http://wangshub.github.io/2018/04/25/python插件式爬虫/</id>
    <published>2018-04-25T07:51:05.000Z</published>
    <updated>2018-04-25T07:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-插件式的信息爬虫"><a href="#Python-插件式的信息爬虫" class="headerlink" title="Python 插件式的信息爬虫"></a>Python 插件式的信息爬虫</h1><blockquote><p>🐝 一群不辞劳苦采花小蜜蜂</p></blockquote><ul><li><a href="https://github.com/wangshub/beehive" target="_blank" rel="noopener">项目代码地址</a></li></ul><p>本项目运行在可以运行在本地或者服务器端，将不同插件程序获取的信息如：每日天气、新闻等，通过 Github Api 上传到仓库进行保存。当然，你还可以你日常机械重复性的劳动在插件中帮你完成，比如煮咖啡、发邮件等等，真是棒极了。</p><blockquote><p><strong>额外收获</strong> ：定期稳定运行在服务器上，还可以每日贡献一次 Github 贡献度 … 点亮你的人生！</p></blockquote><h2 id="工程说明"><a href="#工程说明" class="headerlink" title="工程说明"></a>工程说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── app</span><br><span class="line">│   └── plugins</span><br><span class="line">│       └── weather.py</span><br><span class="line">├── builtin_plugins</span><br><span class="line">├── config</span><br><span class="line">│   └── config.json</span><br><span class="line">├── main.py</span><br><span class="line">└── upload_github.py</span><br></pre></td></tr></table></figure><ul><li><code>main.py</code> : 加载 <code>builtin_plugins/</code> 和 <code>app/</code> 下的插件；</li><li><code>app/plugins/</code> : 插件程序存放路径；</li><li><code>builtin_plugins</code> ： 内置插件路径；</li><li><code>upload_github.py</code> : 通过 Github Api 提交一次 Commit；</li></ul><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ul><li><p>生成 Github Token </p></li><li><p>运行代码</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure></li></ul><h2 id="插件接口-Json-格式"><a href="#插件接口-Json-格式" class="headerlink" title="插件接口 Json 格式"></a>插件接口 Json 格式</h2><p>可以自己补充插件，各个插件的返回值为字典类型，必须满足如下格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"weather"</span>,</span><br><span class="line">  <span class="attr">"date"</span>: <span class="string">"2018-04-23 20:18:03"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: &#123;</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"\u6df1\u5733"</span>, <span class="attr">"weather"</span>: <span class="string">"\u591a\u4e91"</span>, <span class="attr">"temperature"</span>: <span class="string">"21 ~ 26\u2103"</span>, <span class="attr">"humidity"</span>: <span class="string">"\u6e7f\u5ea6\uff1a63%"</span>, <span class="attr">"wind"</span>: <span class="string">"\u98ce\u5411\uff1a\u5317\u98ce 2\u7ea7"</span>, <span class="attr">"radiation"</span>: <span class="string">"\u7d2b\u5916\u7ebf\uff1a\u5f31"</span>, <span class="attr">"air"</span>: <span class="string">"PM: 43"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><code>code</code>: <code>0</code> 成功、<code>-1</code> 失败；</li><li><code>type</code>: 例如 [<code>weather</code>, <code>stock</code>, <code>news</code>] 等；</li><li><code>date</code>: 当天日期，如 <code>2018-05-01</code>；</li><li><code>content</code>: 获取的 Json 格式信息，这部分提交到仓库保存；</li></ul><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul><li style="list-style: none"><input type="checkbox" checked> Python 插件化信息管理，可拓展；</li><li style="list-style: none"><input type="checkbox" checked> 信息保存到 Github 仓库；</li><li style="list-style: none"><input type="checkbox"> 更多插件补充；</li><li><p>[ ] Docker一键部署到本地或服务器；</p></li><li><p>[ ] 信息可视化</p><ul><li style="list-style: none"><input type="checkbox"> Pyeacharts 网页显示</li><li style="list-style: none"><input type="checkbox"> Gitpage 静态页面每日渲染</li></ul></li><li><p>[ ] Itchat 微信推送</p><ul><li style="list-style: none"><input type="checkbox"> 自动登录</li><li style="list-style: none"><input type="checkbox"> 自动推送</li><li style="list-style: none"><input type="checkbox"> 信息查询</li></ul></li><li><p>[ ] 补充插件内容</p><ul><li style="list-style: none"><input type="checkbox"> 插件思路收集</li><li style="list-style: none"><input type="checkbox"> <strong>大新闻</strong>日常备份</li><li style="list-style: none"><input type="checkbox"> 商品价格记录插件</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-插件式的信息爬虫&quot;&gt;&lt;a href=&quot;#Python-插件式的信息爬虫&quot; class=&quot;headerlink&quot; title=&quot;Python 插件式的信息爬虫&quot;&gt;&lt;/a&gt;Python 插件式的信息爬虫&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;🐝 一群
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python插件式程序结构设计</title>
    <link href="http://wangshub.github.io/2018/04/23/Python%E6%8F%92%E4%BB%B6%E5%BC%8F%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://wangshub.github.io/2018/04/23/Python插件式程序结构设计/</id>
    <published>2018-04-23T06:27:19.000Z</published>
    <updated>2018-04-23T08:23:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-插件式程序结构设计"><a href="#Python-插件式程序结构设计" class="headerlink" title="Python 插件式程序结构设计"></a>Python 插件式程序结构设计</h1><blockquote><p>小姐姐，你的插件掉了</p></blockquote><p>本文源码在 <a href="github/wangshub">github/wangshub</a></p><p>最近有个问题一直困扰着我，我经常会遇到对以前的程序或者代码进行功能的扩充，但是由于前期没有太多程序架构上的设计，导致功能扩充时冗余代码太多，而且不方便维护( YC 创始人 Paul Graham 其实推荐这种做法，产品快速上线，获取用户反馈进行修改)。</p><p>知名的插件式设计的项目有</p><ul><li>Emacs</li><li>Vs-code</li><li>Atom</li></ul><p>为了拓展软件的功能，经常会将软件设计成插件式结构，所以就从我熟悉的 Python 开始了解这部分知识。<br>通过 Google， 发现了 <a href="http://pluginbase.pocoo.org/" target="_blank" rel="noopener">Pluginbase</a> Python 插件框架，可以快速实现一个 Python 插件式结构，这篇博客作为阅读笔记。</p><h2 id="项目文件结构"><a href="#项目文件结构" class="headerlink" title="项目文件结构"></a>项目文件结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── app1</span><br><span class="line">│   └── plugins</span><br><span class="line">│       └── secret.py</span><br><span class="line">├── app2</span><br><span class="line">│   └── plugins</span><br><span class="line">│       └── randomstr.py</span><br><span class="line">├── builtin_plugins</span><br><span class="line">│   ├── lowercase.py</span><br><span class="line">│   └── uppercase.py</span><br><span class="line">└── example.py</span><br></pre></td></tr></table></figure><h2 id="插件管理器"><a href="#插件管理器" class="headerlink" title="插件管理器"></a>插件管理器</h2><ul><li>获取当前项目的路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> pluginbase <span class="keyword">import</span> PluginBase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># For easier usage calculate the path relative to here.</span></span><br><span class="line">here = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"><span class="comment"># 函数包装，重新定义函数签名，减少调用参数</span></span><br><span class="line">get_path = partial(os.path.join, here)</span><br><span class="line">print(<span class="string">'here:'</span>, here)</span><br><span class="line">print(<span class="string">'get_path:'</span>, get_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup a plugin base for "example.modules" and make sure to load</span></span><br><span class="line"><span class="comment"># all the default built-in plugins from the builtin_plugins folder.</span></span><br><span class="line">plugin_base = PluginBase(package=<span class="string">'example.plugins'</span>,</span><br><span class="line">                         searchpath=[get_path(<span class="string">'./builtin_plugins'</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Represents a simple example application."""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="comment"># Each application has a name</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># And a dictionary where it stores "formatters".  These will be</span></span><br><span class="line">        <span class="comment"># functions provided by plugins which format strings.</span></span><br><span class="line">        self.formatters = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># and a source which loads the plugins from the "&#123;app_name&#125;/plugins"</span></span><br><span class="line">        <span class="comment"># folder.  We also pass the application name as identifier.  This</span></span><br><span class="line">        <span class="comment"># is optional but by doing this out plugins have consistent</span></span><br><span class="line">        <span class="comment"># internal module names which allows pickle to work.</span></span><br><span class="line">        self.source = plugin_base.make_plugin_source(</span><br><span class="line">            searchpath=[get_path(<span class="string">'./%s/plugins'</span> % name)],</span><br><span class="line">            identifier=self.name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Here we list all the plugins the source knows about, load them</span></span><br><span class="line">        <span class="comment"># and the use the "setup" function provided by the plugin to</span></span><br><span class="line">        <span class="comment"># initialize the plugin.</span></span><br><span class="line">        <span class="keyword">for</span> plugin_name <span class="keyword">in</span> self.source.list_plugins():</span><br><span class="line">            plugin = self.source.load_plugin(plugin_name)</span><br><span class="line">            plugin.setup(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_formatter</span><span class="params">(self, name, formatter)</span>:</span></span><br><span class="line">        <span class="string">"""A function a plugin can use to register a formatter."""</span></span><br><span class="line">        self.formatters[name] = formatter</span><br></pre></td></tr></table></figure><h2 id="实现插件"><a href="#实现插件" class="headerlink" title="实现插件"></a>实现插件</h2><h3 id="插件-1-：-App1"><a href="#插件-1-：-App1" class="headerlink" title="插件 1 ： App1"></a>插件 1 ： App1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_secret</span><span class="params">(s)</span>:</span></span><br><span class="line">    chars = list(s)</span><br><span class="line">    <span class="keyword">for</span> idx, char <span class="keyword">in</span> enumerate(chars):</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> string.punctuation <span class="keyword">and</span> <span class="keyword">not</span> char.isspace():</span><br><span class="line">            chars[idx] = <span class="string">'x'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(chars)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(app)</span>:</span></span><br><span class="line">    app.register_formatter(<span class="string">'secret'</span>, make_secret)</span><br></pre></td></tr></table></figure><h3 id="插件-2-：-App2"><a href="#插件-2-：-App2" class="headerlink" title="插件 2 ： App2"></a>插件 2 ： App2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_random</span><span class="params">(s)</span>:</span></span><br><span class="line">    chars = list(s)</span><br><span class="line">    <span class="keyword">for</span> idx, char <span class="keyword">in</span> enumerate(chars):</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> string.punctuation <span class="keyword">and</span> <span class="keyword">not</span> char.isspace():</span><br><span class="line">            chars[idx] = random.choice(string.ascii_letters)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(chars)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(app)</span>:</span></span><br><span class="line">    app.register_formatter(<span class="string">'random'</span>, make_random)</span><br></pre></td></tr></table></figure><h3 id="内置插件"><a href="#内置插件" class="headerlink" title="内置插件"></a>内置插件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_lowercase</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s.lower()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(app)</span>:</span></span><br><span class="line">    app.register_formatter(<span class="string">'lowercase'</span>, make_lowercase)</span><br></pre></td></tr></table></figure><h2 id="调用你的插件"><a href="#调用你的插件" class="headerlink" title="调用你的插件"></a>调用你的插件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_demo</span><span class="params">(app, source)</span>:</span></span><br><span class="line">    <span class="string">"""Shows all formatters in demo mode of an application."""</span></span><br><span class="line">    print(<span class="string">'Formatters for %s:'</span> % app.name)</span><br><span class="line">    print(<span class="string">'       input: %s'</span> % source)</span><br><span class="line">    <span class="keyword">for</span> name, fmt <span class="keyword">in</span> sorted(app.formatters.items()):</span><br><span class="line">        print(<span class="string">'  %10s: %s'</span> % (name, fmt(source)))</span><br><span class="line">    print(<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h2 id="相关参考链接"><a href="#相关参考链接" class="headerlink" title="相关参考链接"></a>相关参考链接</h2><ul><li><a href="http://hgoldfish.com/blogs/article/81/" target="_blank" rel="noopener">如何设计插件式结构的程序，兼谈Python语言的动态性</a></li><li><a href="https://github.com/wangshub/pluginbase" target="_blank" rel="noopener">A simple but flexible plugin system for Python.</a></li><li><a href="https://docs.python.org/3/tutorial/classes.html" target="_blank" rel="noopener">Python Classes</a></li><li><a href="http://www.wklken.me/posts/2013/08/18/python-extra-functools.html" target="_blank" rel="noopener">PYTHON-进阶-FUNCTOOLS模块小结</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-插件式程序结构设计&quot;&gt;&lt;a href=&quot;#Python-插件式程序结构设计&quot; class=&quot;headerlink&quot; title=&quot;Python 插件式程序结构设计&quot;&gt;&lt;/a&gt;Python 插件式程序结构设计&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;小
      
    
    </summary>
    
    
      <category term="Python" scheme="http://wangshub.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Cerebro插件之电影磁力搜索神器</title>
    <link href="http://wangshub.github.io/2018/03/31/Cerebro%E6%8F%92%E4%BB%B6%E4%B9%8B%E7%94%B5%E5%BD%B1%E7%A3%81%E5%8A%9B%E6%90%9C%E7%B4%A2%E7%A5%9E%E5%99%A8/"/>
    <id>http://wangshub.github.io/2018/03/31/Cerebro插件之电影磁力搜索神器/</id>
    <published>2018-03-31T07:34:51.000Z</published>
    <updated>2018-03-31T07:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cerebro-插件之电影磁力搜索神器"><a href="#Cerebro-插件之电影磁力搜索神器" class="headerlink" title="Cerebro 插件之电影磁力搜索神器"></a>Cerebro 插件之电影磁力搜索神器</h1><blockquote><p>Cerebro plugin to search torrent of movies<br>什么？看个片儿还要打开网页慢慢找?！</p></blockquote><p>这周在学 Node.js, 看了 <a href="https://github.com/carlos-wong" target="_blank" rel="noopener">@carlos-wong</a> 推荐的<a href="https://eloquentjavascript.net" target="_blank" rel="noopener">《Eloquent JavaScript》</a> 这本书的前几章，就抑制不住想写点什么练手。<a href="https://github.com/KELiON/cerebro" target="_blank" rel="noopener">Cerebro</a> 是一个跨平台的快速启动工具（同时支持 Windows、MacOs、Linux），并且可以用 Javascript 定制各种自己喜欢的插件。所以做了一个<strong>电影磁力搜索器</strong>的插件。</p><h2 id="支持平台"><a href="#支持平台" class="headerlink" title="支持平台"></a>支持平台</h2><p>Windows、Linux、MacOS</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/wangshub/cerebro-torrent/raw/master/resource/magnet_demo_2M.gif" alt="截图" title="">                </div>                <div class="image-caption">截图</div>            </figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在 Cerebro 对话框中输入电影名称，使用键盘上/下按键选择电影，敲击 <code>回车</code> ,磁力链接就会自动复制到剪贴板。</p><ul><li><code>magnet [电影名称][空格]</code></li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="Cerebro-内安装插件"><a href="#Cerebro-内安装插件" class="headerlink" title="Cerebro 内安装插件"></a>Cerebro 内安装插件</h3><ul><li><code>ctrl-space</code> 启动 Cerebro</li><li>输入 <code>plugins torrent</code></li><li>点击 <code>install</code></li></ul><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><ul><li><p>确保安装好了 <a href="https://github.com/KELiON/cerebro" target="_blank" rel="noopener">Cerebro</a></p></li><li><p><code>Clone</code> 代码到本地，并执行</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/wangshub/cerebro-torrent.git</span><br><span class="line">cd cerebro-torrent</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure></li><li><p>将 <code>cerebro-torrent</code> 文件夹拷贝或者软链接到 <code>Cerebro</code> 的 <code>node_module</code> 文件夹下；</p></li><li>启动 <code>Cerebro</code>，输入 <code>magnets 葫芦娃</code>，然后敲击 <code>空格</code>；</li><li>稍等片刻，上下选择，敲击回车就可以将磁力链接复制到剪贴板；</li><li>打开迅雷或者其他下载器，尽情享受吧！</li></ul><h2 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h2><ul><li>解析输入的指令；</li><li>利用 async 和 request 库并发爬取网站；</li><li>使用 cheerio 解析网页节点；</li><li>嵌入一段 html 对爬取结果进行显示；</li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><p>欢迎 <code>star ⭐️</code>  和 <code>fork 💫</code> 多提 Issue !<br><a href="https://github.com/wangshub/cerebro-torrent" target="_blank" rel="noopener">wangshub/cerebro-torrent</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cerebro-插件之电影磁力搜索神器&quot;&gt;&lt;a href=&quot;#Cerebro-插件之电影磁力搜索神器&quot; class=&quot;headerlink&quot; title=&quot;Cerebro 插件之电影磁力搜索神器&quot;&gt;&lt;/a&gt;Cerebro 插件之电影磁力搜索神器&lt;/h1&gt;&lt;bloc
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://wangshub.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>如何解决EDAS上传论文时fonts问题</title>
    <link href="http://wangshub.github.io/2018/02/10/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3EDAS%E4%B8%8A%E4%BC%A0%E8%AE%BA%E6%96%87%E6%97%B6fonts%E9%97%AE%E9%A2%98/"/>
    <id>http://wangshub.github.io/2018/02/10/如何解决EDAS上传论文时fonts问题/</id>
    <published>2018-02-10T09:29:54.000Z</published>
    <updated>2018-03-17T09:10:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何解决-EDAS-上传论文时-PDF-fonts-问题"><a href="#如何解决-EDAS-上传论文时-PDF-fonts-问题" class="headerlink" title="如何解决 EDAS 上传论文时 PDF fonts 问题"></a>如何解决 EDAS 上传论文时 PDF fonts 问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>今天在上传 <strong>IEEE xplore</strong> 论文时遇到上传字体出错的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload failed: One or more fonts are not embedded. See EDAS FAQ</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fo91n03t4pj20z1079t8y.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="检查字体子集"><a href="#检查字体子集" class="headerlink" title="检查字体子集"></a>检查字体子集</h3><p>在  <strong>EDAS</strong> 上传  <strong>Latex</strong>  输出的 PDF 文档时，需要检查 PDF 文档的中所有的字体是否是都是 <strong>已嵌入子集</strong>，检查方式是：</p><ol><li>用 <code>Acrobat pdf</code>或 <code>Foxit PDF</code>工具打开待检查的 PDF 文件 <code>paper.pdf</code></li><li>打开 <code>文件(file)-&gt;属性(property)-&gt;字体(fonts)</code></li><li>查看所有的字体是否是<strong>已嵌入</strong>或者<strong>已嵌入子集</strong></li></ol><h3 id="更改字体"><a href="#更改字体" class="headerlink" title="更改字体"></a>更改字体</h3><p>如果出现未嵌入的子集</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fo91n01ymzj209k060743.jpg" alt="helvitica" title="">                </div>                <div class="image-caption">helvitica</div>            </figure><p><code>helvitica</code>字体未嵌入的原因是论文中使用了<strong>Matlab</strong>生成的图像，<strong>Matlab</strong> 默认使用了 <code>Helvetica</code> 字体，Latex 在引用该图片时，也默认使用了 <code>Helvetica</code> 字体，导致生成的 PDF 文件不能将这个字体嵌入。</p><p><strong>解决步骤：</strong></p><ol><li><p>如果是引用的图片是pdf格式，需要使用 <code>shell</code> 命令<code>ps2pdf13</code>，将<code>Helvetica</code> 进行转化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps2pdf13 -dPDFSETTINGS=/prepress fig_non_embedded.pdf fig_embedded.pdf</span><br></pre></td></tr></table></figure></li><li><p>如果你需要嵌入 <code>*.esp</code>图片文件到你的 Latex 文章中，还需要将<strong>步骤1</strong>中的 <code>*.pdf</code> 转成 <code>*.esp</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdftops -eps -level2 [pdfname] [epsname]</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://sites.google.com/site/xyzliwen/resource/embed_font_ieee_pdf_explore" target="_blank" rel="noopener">https://sites.google.com/site/xyzliwen/resource/embed_font_ieee_pdf_explore</a></p><p><a href="http://www.mit.edu/~kimo/blog/matlab_figures.html" target="_blank" rel="noopener">http://www.mit.edu/~kimo/blog/matlab_figures.html</a></p><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何解决-EDAS-上传论文时-PDF-fonts-问题&quot;&gt;&lt;a href=&quot;#如何解决-EDAS-上传论文时-PDF-fonts-问题&quot; class=&quot;headerlink&quot; title=&quot;如何解决 EDAS 上传论文时 PDF fonts 问题&quot;&gt;&lt;/a&gt;如何
      
    
    </summary>
    
    
      <category term="latex" scheme="http://wangshub.github.io/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>python装饰器学习笔记</title>
    <link href="http://wangshub.github.io/2018/02/07/python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangshub.github.io/2018/02/07/python装饰器学习笔记/</id>
    <published>2018-02-07T06:02:39.000Z</published>
    <updated>2018-03-17T09:10:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-装饰器学习笔记"><a href="#python-装饰器学习笔记" class="headerlink" title="python 装饰器学习笔记"></a>python 装饰器学习笔记</h1><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><blockquote><p>装饰器的作用就是为已经存在的对象添加额外的功能</p></blockquote><p>我们可以继续调用装饰器来修饰函数，而不用重复修改函数或者增加新的封装。这样就提高了程序的可重复利用性，并增加了程序的可读性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-装饰器学习笔记&quot;&gt;&lt;a href=&quot;#python-装饰器学习笔记&quot; class=&quot;headerlink&quot; title=&quot;python 装饰器学习笔记&quot;&gt;&lt;/a&gt;python 装饰器学习笔记&lt;/h1&gt;&lt;h2 id=&quot;概括&quot;&gt;&lt;a href=&quot;#概括&quot;
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>用python对github用户followers分析</title>
    <link href="http://wangshub.github.io/2018/01/15/%E7%94%A8python%E5%AF%B9github%E7%94%A8%E6%88%B7followers%E5%88%86%E6%9E%90/"/>
    <id>http://wangshub.github.io/2018/01/15/用python对github用户followers分析/</id>
    <published>2018-01-15T01:40:16.000Z</published>
    <updated>2018-03-17T09:10:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="github-用户-followers-分析"><a href="#github-用户-followers-分析" class="headerlink" title="github 用户 followers 分析"></a>github 用户 followers 分析</h1><p><strong>如何分析一个github用户的followers？</strong></p><p>周末手痒，用python分析了一下自己 <a href="https://github.com/wangshub" target="_blank" rel="noopener">github</a> 的 <strong>followers</strong> 用户，统计结果如下</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>在github上，一个用户的主页显示如下，主要对如下用户信息进行提取</p><ul><li>用户名称</li><li>所在的位置</li><li>用户仓库、stars、Followers、Following数量</li><li>去年一年的贡献度</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fngknl9cckj20uh0g6wfm.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们需要对上图红框里面的数据进行提取，最直接的方法是使用<code>requests</code>，通过<code>BeautifulSoup</code>对<code>html</code>中的信息进行提取。</p><h2 id="一些弯路"><a href="#一些弯路" class="headerlink" title="一些弯路"></a>一些弯路</h2><p>最开始没打算用爬虫的方式来获取用户信息，因为github有公开的<a href="https://developer.github.com/v3/" target="_blank" rel="noopener">REST API v3</a>可以对指定用户的信息进行访问，并且已经有打包好的<a href="https://github.com/PyGithub/PyGithub" target="_blank" rel="noopener">PyGithub</a>方便调用。但是我实验下来有如下问题所以放弃使用<a href="https://developer.github.com/v3/" target="_blank" rel="noopener">REST API v3</a></p><ol><li>API请求频率有限制，无法运用多线程快速获取批量的用户信息</li><li>不知道是不是小BUG，通过API无法获得用户去年一年的贡献度<strong>contributions</strong></li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><strong>python 3</strong> ： 彻底告别我的py2</li><li><strong>BeaufulSoup</strong> ：从HTML或XML文件中提取数据</li><li><strong>Requests</strong> ： 请求网页</li><li><strong>多进程</strong> ： 为了更快</li><li><strong>pyecharts</strong> ： 美的令人窒息的绘图工具</li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>获取目标用户如<code>https://github.com/wangshub?page=1&amp;tab=followers</code>的所有followers；</li><li>改变<code>page</code>编号，遍历所有用户；</li><li>提取用户关键信息，保存成<code>csv</code>文件；</li><li>数据清洗，过滤；</li><li>利用<a href="https://github.com/pyecharts/pyecharts" target="_blank" rel="noopener">pyecharts</a>绘图；</li><li>进行地点词频统计； </li></ol><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>截止<code>2018-01-15</code>,我的github账号一共有<code>1214</code>名follower，分析结果如下</p><h3 id="用户地点分析"><a href="#用户地点分析" class="headerlink" title="用户地点分析"></a>用户地点分析</h3><p>排除掉没有填写地点信息的用户，将中文转化成pinyin后，词云如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fngljy93kjj20rs0nwtdv.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>用户基本上都是来自<code>北京、上海、深圳</code>等地</p><h3 id="去年一年用户贡献度分析"><a href="#去年一年用户贡献度分析" class="headerlink" title="去年一年用户贡献度分析"></a>去年一年用户贡献度分析</h3><p>如果看用户是否活跃，肯定是看<code>contributions</code>啦</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fngln8yfgij20m80b4t94.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出超过一般多的用户，去年的贡献度都在都在 <strong>1~50</strong> 之间，新的一年要加油啦。其中一年贡献最多的用户是<a href="https://github.com/dragon-yuan" target="_blank" rel="noopener">@dragon-yuan</a>, 在2017年有整整 <strong>4,197</strong> 个贡献度，不多说了，前去关注一波。</p><h3 id="用户followers分析"><a href="#用户followers分析" class="headerlink" title="用户followers分析"></a>用户followers分析</h3><p>哇，有大牛，别拦着我，我要去点关注了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fngmed2kovj20m80b474m.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="用户仓库数量分析"><a href="#用户仓库数量分析" class="headerlink" title="用户仓库数量分析"></a>用户仓库数量分析</h3><p>通过爬取用户的仓库数量，进行统计如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fnglp9onenj20m80b4jrs.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到一个有意思的现象，有少数的人仓库数量超过了<strong>1000</strong>，打开这几位仁兄的github主页，大部分是fork的项目，其中仓库最多的用户有<strong>13100个</strong>仓库，叫<a href="https://github.com/ProgrammerAndHacker" target="_blank" rel="noopener">@ProgrammerAndHacker</a>，他是这么介绍自己的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I follow best programmer and hacker， </span><br><span class="line">Do you want to hacked by them? ^_^ </span><br><span class="line">Best programmers and hackers are here: </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="用户stars分析"><a href="#用户stars分析" class="headerlink" title="用户stars分析"></a>用户stars分析</h3><p>都说点击star是一个好习惯，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fngm1vx9oij20m80b4dg8.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>不得不说，github上面还是有点赞狂魔的，这位老铁<a href="https://github.com/chenruibin" target="_blank" rel="noopener">@chenruibin</a>一共点击了<code>10100</code>个赞，真是好习惯～</p><h3 id="用户-following-分析"><a href="#用户-following-分析" class="headerlink" title="用户 following 分析"></a>用户 following 分析</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fngm814cbgj20m80b43yw.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>同样是<a href="https://github.com/ProgrammerAndHacker" target="_blank" rel="noopener">@ProgrammerAndHacker</a>这位仁兄，一共follow了<strong>19600</strong>个用户，严重怀疑是不是机器人。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>不搞了，我要去写论文了TAT，要代码的，来这里找<a href="https://github.com/wangshub/who_is_following" target="_blank" rel="noopener">https://github.com/wangshub/who_is_following</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;github-用户-followers-分析&quot;&gt;&lt;a href=&quot;#github-用户-followers-分析&quot; class=&quot;headerlink&quot; title=&quot;github 用户 followers 分析&quot;&gt;&lt;/a&gt;github 用户 followers 
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
      <category term="github" scheme="http://wangshub.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>教你用Python来玩微信跳一跳</title>
    <link href="http://wangshub.github.io/2017/12/29/%E6%95%99%E4%BD%A0%E7%94%A8Python%E6%9D%A5%E7%8E%A9%E5%BE%AE%E4%BF%A1%E8%B7%B3%E4%B8%80%E8%B7%B3/"/>
    <id>http://wangshub.github.io/2017/12/29/教你用Python来玩微信跳一跳/</id>
    <published>2017-12-29T02:02:41.000Z</published>
    <updated>2018-03-17T09:10:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="教你用Python来玩微信跳一跳"><a href="#教你用Python来玩微信跳一跳" class="headerlink" title="教你用Python来玩微信跳一跳"></a>教你用Python来玩微信跳一跳</h1><blockquote><p>2017年12月28日下午，微信发布了 6.6.1 版本，加入了「小游戏」功能，并提供了官方 demo「跳一跳」。</p></blockquote><p><a href="https://wangshub.github.io">blog 地址</a></p><p><a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">github 地址</a></p><p><a href="https://zhuanlan.zhihu.com/p/32452473" target="_blank" rel="noopener">知乎专栏</a></p><h2 id="游戏模式"><a href="#游戏模式" class="headerlink" title="游戏模式"></a>游戏模式</h2><p>这是一个 2.5D 插画风格的益智游戏，玩家可以通过按压屏幕时间的长短来控制这个「小人」跳跃的距离。可能刚开始上手的时候，因为时间距离之间的关系把握不恰当，只能跳出几个就掉到了台子下面。<br>玩法类似于《flappy bird》</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmxe4gnfhnj20hs0a0t8q.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>如果能精确测量出起始和目标点之间测距离，就可以估计按压的时间来精确跳跃？所以花2个小时写了一个python脚本进行验证</strong></p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><ul><li>Python 2.7</li><li>Android 手机</li><li>Adb 驱动</li><li>Python Matplot绘图</li></ul><h2 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h2><ol><li>将手机点击到《跳一跳》小程序界面；</li><li>用Adb 工具获取当前手机截图，并用adb将截图pull上来</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p /sdcard/1.png</span><br><span class="line">adb pull /sdcard/1.png .</span><br></pre></td></tr></table></figure><ol><li>用matplot显示截图；</li><li>用鼠标点击起始点和目标位置，计算像素距离；</li><li>根据像素距离，计算按压时间；</li><li>用Adb工具点击屏幕蓄力一跳；</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input swipe x y x y time</span><br></pre></td></tr></table></figure><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmxel5dkxvj20u01hcmzx.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>可以对拉上来的图片进行颜色分割，识别小人和目标中心店，这样就不需要手动点击自动弹跳。<br>事实证明，机器人比人更会玩儿游戏。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;教你用Python来玩微信跳一跳&quot;&gt;&lt;a href=&quot;#教你用Python来玩微信跳一跳&quot; class=&quot;headerlink&quot; title=&quot;教你用Python来玩微信跳一跳&quot;&gt;&lt;/a&gt;教你用Python来玩微信跳一跳&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;2
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python蔡英文facebook主页分析_by神奇的战士</title>
    <link href="http://wangshub.github.io/2017/12/25/Python%E8%94%A1%E8%8B%B1%E6%96%87facebook%E4%B8%BB%E9%A1%B5%E5%88%86%E6%9E%90-by%E7%A5%9E%E5%A5%87%E7%9A%84%E6%88%98%E5%A3%AB/"/>
    <id>http://wangshub.github.io/2017/12/25/Python蔡英文facebook主页分析-by神奇的战士/</id>
    <published>2017-12-25T07:14:39.000Z</published>
    <updated>2018-03-17T09:10:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python蔡英文facebook主页分析-by神奇的战士"><a href="#Python蔡英文facebook主页分析-by神奇的战士" class="headerlink" title="Python蔡英文facebook主页分析(by神奇的战士)"></a><strong>Python</strong>蔡英文facebook主页分析(by神奇的战士)</h1><ul><li>博客地址：<a href="https://wangshub.github.io/">https://wangshub.github.io/</a></li><li>公众号：舒林笑笑生</li><li>拒绝转载</li></ul><p>用<a href="https://developers.facebook.com/tools/explorer/?method=GET&amp;path=tsaiingwen%2Fposts&amp;version=v2.11" target="_blank" rel="noopener">Facebook Graph API</a>和情绪分析API对蔡英文Facebook主页进行统计分析。</p><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p><a href="https://baike.baidu.com/item/%E8%94%A1%E8%8B%B1%E6%96%87/353?fr=aladdin" target="_blank" rel="noopener">蔡英文</a>2016年5月20日，蔡英文正式就任台湾地区领导人，成为台湾地区首位女性领导人。</p><p>最近台湾省地区新闻主要有：</p><blockquote><p>新闻来源： 人民网<br><a href="http://tw.people.com.cn/n1/2017/1222/c14657-29722289.html" target="_blank" rel="noopener">坚决惩治电信诈骗犯罪 切实维护两岸同胞利益</a><br><a href="http://tw.people.com.cn/n1/2017/1221/c14657-29720989.html" target="_blank" rel="noopener">两岸学者评新党人士被调查事件：民进党当局逆流而动终将自掘坟墓</a><br><a href="http://tw.people.com.cn/n1/2017/1126/c14657-29668078.html" target="_blank" rel="noopener">台民众高呼“醒来”，蔡英文不能继续装睡</a><br>…</p></blockquote><p><strong>但是真实的台湾同胞们是如何看待她的执政表现呢？</strong></p><h2 id="2-实现工具"><a href="#2-实现工具" class="headerlink" title="2. 实现工具"></a>2. 实现工具</h2><p>如果是直接爬取脸书的主页，需要进行模拟登陆，反爬虫，代理，验证等等一系列的操作。幸好脸书开放出了图API，可以在一定的请求限制下对脸书上的数据进行访问。注意在多线程请求API的时候，不应该请求的太快，否则会被系统封禁一段时间(不要问我为什么-_-)。</p><p><strong>目前为止使用了如下这些工具：</strong></p><ul><li>python 2.7</li><li><a href="https://developers.facebook.com/tools/explorer/?method=GET&amp;path=tsaiingwen%2Fposts&amp;version=v2.11" target="_blank" rel="noopener">Facebook Graph API</a></li><li>情感分析API</li><li>python 词云</li><li><a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">python 中文jieba分词</a></li><li>python Pandas</li><li>python 多线程</li></ul><h2 id="3-数据处理"><a href="#3-数据处理" class="headerlink" title="3. 数据处理"></a>3. 数据处理</h2><h3 id="3-1-posts"><a href="#3-1-posts" class="headerlink" title="3.1 posts"></a>3.1 posts</h3><p>首先测试脸书<a href="https://developers.facebook.com/tools/explorer/?method=GET&amp;path=tsaiingwen%2Fposts&amp;version=v2.11" target="_blank" rel="noopener">Facebook Graph API</a>，对蔡小姐的post进行访问，</p><p><strong>curl测试脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line"> "https://graph.facebook.com/v2.11/tsaiingwen/posts?access_token=xxxxxxxxxxxxxxxxx"</span><br></pre></td></tr></table></figure><p><strong>返回示例</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">"data": [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created_time"</span>: <span class="string">"2017-12-24T11:50:06+0000"</span>,</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"蔡想想🐱祝福大家聖誕快樂🎅</span></span><br><span class="line"><span class="string">        #MerryChristmas"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"46251501064_10154820163381065"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">],</span><br><span class="line">"paging": &#123;</span><br><span class="line">    "cursors": &#123;</span><br><span class="line">      "before": "xxxxxx",</span><br><span class="line">      "after": "xxxxx"</span><br><span class="line">    &#125;,</span><br><span class="line">    "next": "xxxxxxxxxxxxxxxxxxxxxx"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以观察到，脸书的每一个post都对应了一个唯一的<strong>id</strong>，由于post的数量是在太多，所以一次请求无法完整获取。根据<strong>next</strong>可以得到下一页的post，直到<strong>next</strong>为空时，表示所有的post获取完毕。</p><p>根据以上原理，我获取了蔡小姐从开通脸书第一天起到今天，发的每一条post。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmsa0xjo5fj21py0ht0ul.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>横坐标：时间</li><li>纵坐标：每天发文数量</li></ul><p>自 <em>2008-10-22T13:55:20+0000</em>蔡小姐发了第一条post以来，一共发了<strong>4120</strong>篇状态，基本上在脸书上还是非常活跃的，在2012年最多一天发送了24条状态，成功刷屏。</p><h3 id="3-2-comments"><a href="#3-2-comments" class="headerlink" title="3.2 comments"></a>3.2 comments</h3><p>与 <strong>3.1</strong>节类似，每一个post下都会有网友进行评论，那么如何获取所有评论?参考图谱API文档，利用测试脚本</p><p><strong>curl测试脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line"> "https://graph.facebook.com/v2.11/46251501064_10154729068451065/comments?access_token=xxxxxxxxxxxx"</span><br></pre></td></tr></table></figure><p><strong>返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created_time"</span>: <span class="string">"2017-11-13T07:15:25+0000"</span>,</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"XXXXXXXX"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"10154729068451065_10154729097936065"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">  <span class="string">"paging"</span>: &#123;</span><br><span class="line">  <span class="attr">"cursors"</span>: &#123;</span><br><span class="line">      <span class="attr">"before"</span>: <span class="string">"MTQyNQZDZD"</span>,</span><br><span class="line">      <span class="attr">"after"</span>: <span class="string">"MTM5MQZDZD"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"next"</span>: <span class="string">"https://graph.facebook.com/v2.11/46251501064_10154729068451065/comments?access_token=xxxxxxxx&amp;pretty=0&amp;limit=25&amp;after=MTM5MQZDZD"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>每一条评论都对应着唯一的<strong>id</strong>，<strong>next</strong>字段是下一页的评论内容。可以通过设置，选择一夜最多显示100条评论。以此逐级获取所有的评论。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmsadx87t0j20m80goacm.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>横坐标：时间</li><li>纵坐标：每条状态对应的评论数量</li></ul><p>一共爬取了<strong>1830322</strong>条网友评论，最多评论数是<strong>23630</strong>条。其中几次出现了较大值，原因应该是前几次大陆网友自发组织的Facebook远征军去进行<strong>友好访问</strong>了。具体内容可以接下来对这几次的峰值进行详细分析。</p><blockquote><p><strong>相关新闻</strong>：<br><a href="http://news.163.com/16/0122/19/BDV5H0O200014SEH.html" target="_blank" rel="noopener">帝吧“远征”facebook｜一场表情包大战的爱国交流</a><br><a href="https://www.zhihu.com/question/39663757" target="_blank" rel="noopener">如何评价李毅吧 2016 年 1 月 20 日「出征」Facebook？</a></p></blockquote><h2 id="4-数据分析"><a href="#4-数据分析" class="headerlink" title="4. 数据分析"></a>4. 数据分析</h2><h3 id="4-1-蔡英文主页分析"><a href="#4-1-蔡英文主页分析" class="headerlink" title="4.1. 蔡英文主页分析"></a>4.1. 蔡英文主页分析</h3><p>一共获取了蔡小姐的<strong>4120</strong>状态，对json的message字段进行提取，将所有的状态的文字保存进行词云分析，看哪些词汇出现的频率最高。</p><ol><li>首先利用Pandas对状态的结构数据进行保存；</li><li>读取Pandas表格，获取所有的状态文字；</li><li>利用jieba中文分词库，对所有的文字进行分割；</li><li>显示，保存图片；</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmsaval30qj21041taaom.jpg" alt="蔡小姐词云" title="">                </div>                <div class="image-caption">蔡小姐词云</div>            </figure><h3 id="4-2-蔡英文评论分析"><a href="#4-2-蔡英文评论分析" class="headerlink" title="4.2. 蔡英文评论分析"></a>4.2. 蔡英文评论分析</h3><p>从蔡小姐的post的所有评论当中，我找出了一条评论最多的状态，共有<strong>23630</strong>条评论，对应id为<code>46251501064_10154244975341065</code>，读取对应数据文件，利用词云分析可得</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmt0ape4h1j20b405kt9b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>看来台湾网友也十分注意<strong>安全开车</strong>，其实这条post的评论区被台湾网友刷屏了，看来怨气挺重呢，哈哈哈哈，霸屏具体内容是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.政府請正視目前台灣改裝汽機車問題！</span><br><span class="line">排氣管及改裝品可以合法製造 合法販賣 合法進口但裝載車上就不合法 這是什麼邏輯 政府要課稅又要開罰單又是什麼想法？</span><br><span class="line">排氣管或車上零件是原廠被惡意檢舉驗車那是否能跟監理單位或環保署拿今日上班請假損失？</span><br><span class="line">2.環保局 監理站 警察執法單位 專業度嚴重不足 原廠排氣管也開單 叫民眾到監理單位驗車 當做民眾都很有時間？</span><br><span class="line">3.請提供可比照國外變更車體，如重機行李箱、遮陽板、避震、制動煞車系統在不影響行車安全的部份合乎法規</span><br><span class="line">4.如民眾遭受到檢舉達人惡意檢舉，因此需要請假驗車，若屬於惡意檢舉，政府需要支付民眾請假之當天工資</span><br><span class="line">蔡??...您不是希望台灣能跟世界接軌，那請您重視汽機車改裝合法性與可變更性，在不影響行車安全與噪音的&gt; 情況下，請把檢舉改裝還於司法單位執行，才不構成擾民。</span><br></pre></td></tr></table></figure></p><p>既然这条被刷屏了，那就换成最新的一篇post，看看网友又关心啥问题。。。<br>截止爬取脸书时，最新一条博客是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你有吃過越南生春捲、香蘭娘惹糕或是薑黃飯嗎？它們是來自東南亞各國的美食，現在也是台灣的美食。</span><br><span class="line">今天是國際移民日，前幾天，我邀請了幾位新移民的好朋友來到總統府，一起準備午餐。在這場午餐的約會中，他們和我分享來到台灣生活的點點滴滴，也給我很多建議。</span><br><span class="line">謝謝你們來到台灣，讓我們的社會更多元、更茁壯。祝大家國際移民日快樂！</span><br><span class="line">#留言告訴我你最喜歡的新南向美食</span><br><span class="line">#晚餐文&quot;,</span><br></pre></td></tr></table></figure><p>蔡小姐问网友喜欢吃啥美食，我们来看看网友是如何回复的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmt0p0kbpbj218g0m8drx.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>结合最近的新党王炳忠事件，评论中出现了较多<strong>绿色恐怖、王炳忠、白色恐怖</strong>等高频词汇</p><h2 id="5-TODO"><a href="#5-TODO" class="headerlink" title="5. TODO"></a>5. TODO</h2><p>可以分析的数据还有很多，就先分析这么多了，接下来，可以对评论进行情感分析，看下网友对蔡小姐的评论是积极还是消极的多一些。不过经过这一年的时间来看，应该是消极多一点。哈哈哈</p><p>总结下来，我认为：</p><ol><li>台湾社会的认知是处于一个分裂的状态；</li><li>不少年轻人还是无脑反对大陆；</li><li>真正理性思考人太少；</li><li>不少人处于岛内的小确幸当中；</li><li>结合最近的新闻来看，猜测台湾的士兵在开战时会不会遇到<strong>为了什么而战斗</strong>的信仰问题。哈哈，一百分将军太逗啦</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python蔡英文facebook主页分析-by神奇的战士&quot;&gt;&lt;a href=&quot;#Python蔡英文facebook主页分析-by神奇的战士&quot; class=&quot;headerlink&quot; title=&quot;Python蔡英文facebook主页分析(by神奇的战士)&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux驱动器和分区的备份，使用dd命令示例</title>
    <link href="http://wangshub.github.io/2017/12/18/linux%E9%A9%B1%E5%8A%A8%E5%99%A8%E5%92%8C%E5%88%86%E5%8C%BA%E7%9A%84%E5%A4%87%E4%BB%BD%EF%BC%8C%E4%BD%BF%E7%94%A8dd%E5%91%BD%E4%BB%A4%E7%A4%BA%E4%BE%8B/"/>
    <id>http://wangshub.github.io/2017/12/18/linux驱动器和分区的备份，使用dd命令示例/</id>
    <published>2017-12-18T12:04:51.000Z</published>
    <updated>2018-03-17T09:10:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>dd命令是Linux发行版非常简单的备份工具。 “dd”工具简单的拷贝标准输入到标准输出，在512字节块读取。<br>dd 命令是Linux发行版非常简单的备份工具。该“dd”工具简单的拷贝标准输入到标准输出，在512字节块读取。 用dd命令，我们可以创建整盘，磁盘驱动器等备份，下面这篇文章将帮助你学习一些有用的“dd”命令。</p><h2 id="1：创建现有分区备份"><a href="#1：创建现有分区备份" class="headerlink" title="1：创建现有分区备份"></a>1：创建现有分区备份</h2><p>以下命令将整个分区/dev/sdb1备份到/opt/sdb1.img文件。</p><p><code># dd if=/dev/sdb1 of=/opt/sdb1.img</code></p><p>样本输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16064937+0 records in</span><br><span class="line">16064937+0 records out</span><br><span class="line">8225247744 bytes (8.2 GB) copied, 123.319 s, 66.7 MB/s</span><br></pre></td></tr></table></figure></p><h2 id="2：恢复备份到其他分区"><a href="#2：恢复备份到其他分区" class="headerlink" title="2：恢复备份到其他分区"></a>2：恢复备份到其他分区</h2><p>上面 /opt/sdb1.img备份文件可以恢复到其他分区（/dev/sdb2），我们可以用以下命令恢复。</p><p><code># dd if=/opt/sdb1.img of=/dev/sdb2</code></p><p>样本输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16064937+0 records in</span><br><span class="line">16064937+0 records out</span><br><span class="line">8225247744 bytes (8.2 GB) copied, 197.688 s, 41.6 MB/s</span><br></pre></td></tr></table></figure></p><p>现在，你可以看到的/dev/sdb2 是/dev/sdb1 的翻版。</p><h2 id="3：创建与现有分区副本"><a href="#3：创建与现有分区副本" class="headerlink" title="3：创建与现有分区副本"></a>3：创建与现有分区副本</h2><p>我们可以直接从现有的分区副本来分区。以下命令将创建的/dev/sdb1 到 /dev/sdb2 的副本。</p><p><code># dd if=/dev/sdb1 of=/dev/sdb2</code></p><p>样本输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16064937+0 records in</span><br><span class="line">16064937+0 records out</span><br><span class="line">8225247744 bytes (8.2 GB) copied, 221.431 s, 37.1 MB/s</span><br></pre></td></tr></table></figure></p><h2 id="4：创建现有的硬盘克隆"><a href="#4：创建现有的硬盘克隆" class="headerlink" title="4：创建现有的硬盘克隆"></a>4：创建现有的硬盘克隆</h2><p>以下命令将复制前446个字节这是MBR从第一个磁盘到第二个磁盘。这将创建第二个磁盘引导。 。</p><p><code># dd if=/dev/sda of=/dev/sdb bs=446 count=1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1+0 records in</span><br><span class="line">1+0 records out</span><br><span class="line">446 bytes (446 B) copied, 0.00174812 s, 255 kB/s</span><br></pre></td></tr></table></figure><p>现在确保在/dev/sdb的匹配为/dev/sda的分区。一旦做到这一点，您可以使用复制每个分区：</p><p><code># dd if=/dev/sda1 of=/dev/sdb1</code></p><p><code># dd if=/dev/sda2 of=/dev/sdb2</code></p><h2 id="5：备份和恢复的MBR镜像文件"><a href="#5：备份和恢复的MBR镜像文件" class="headerlink" title="5：备份和恢复的MBR镜像文件"></a>5：备份和恢复的MBR镜像文件</h2><p>创建使用以下命令MBR的镜像文件的备份。</p><p><code># dd if=/dev/sda of=/opt/backup-mbr-sda.img bs=512 count=1</code></p><p>示例输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1+0 records in</span><br><span class="line">1+0 records out</span><br><span class="line">512 bytes (512 B) copied, 0.0115243 s, 44.4 kB/s</span><br></pre></td></tr></table></figure></p><p>接下来的步骤是MBR恢复到不同的磁盘，使用下面的命令来做到这一点。</p><p><code># dd if=/opt/backup-mbr-sda.img of=/dev/sdb bs=446 count=1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dd命令是Linux发行版非常简单的备份工具。 “dd”工具简单的拷贝标准输入到标准输出，在512字节块读取。&lt;br&gt;dd 命令是Linux发行版非常简单的备份工具。该“dd”工具简单的拷贝标准输入到标准输出，在512字节块读取。 用dd命令，我们可以创建整盘，磁盘驱动器等
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wangshub.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python数字图像处理-图像噪声与去噪算法</title>
    <link href="http://wangshub.github.io/2017/12/16/python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E5%9B%BE%E5%83%8F%E5%99%AA%E5%A3%B0%E4%B8%8E%E5%8E%BB%E5%99%AA%E7%AE%97%E6%B3%95/"/>
    <id>http://wangshub.github.io/2017/12/16/python数字图像处理-图像噪声与去噪算法/</id>
    <published>2017-12-16T09:19:29.000Z</published>
    <updated>2018-03-17T09:10:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python数字图像处理-图像噪声与去噪算法"><a href="#python数字图像处理-图像噪声与去噪算法" class="headerlink" title="python数字图像处理-图像噪声与去噪算法"></a>python数字图像处理-图像噪声与去噪算法</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e6accc01f.png" alt="figure_1.png" title="">                </div>                <div class="image-caption">figure_1.png</div>            </figure><h2 id="图像噪声"><a href="#图像噪声" class="headerlink" title="图像噪声"></a>图像噪声</h2><h3 id="椒盐噪声"><a href="#椒盐噪声" class="headerlink" title="椒盐噪声"></a>椒盐噪声</h3><p><strong>概述：</strong> 椒盐噪声（salt &amp; pepper noise）是数字图像的一个常见噪声，所谓椒盐，椒就是黑，盐就是白，椒盐噪声就是在图像上随机出现黑色白色的像素。椒盐噪声是一种因为信号脉冲强度引起的噪声，产生该噪声的算法也比较简单。</p><p>给一副数字图像加上椒盐噪声的步骤如下：</p><ol><li>指定信噪比 SNR （其取值范围在[0, 1]之间）</li><li>计算总像素数目 SP， 得到要加噪的像素数目 NP = SP * (1-SNR)</li><li>随机获取要加噪的每个像素位置P（i, j）</li><li>指定像素值为255或者0。</li><li>重复3,4两个步骤完成所有像素的NP个像素</li><li>输出加噪以后的图像</li></ol><h3 id="高斯噪声"><a href="#高斯噪声" class="headerlink" title="高斯噪声"></a>高斯噪声</h3><p><strong>概述：</strong> 加性高斯白噪声(Additive white Gaussian noise，AWGN)在通信领域中指的是一种功率谱函数是常数(即白噪声), 且幅度服从高斯分布的噪声信号. 这类噪声通常来自感光元件, 且无法避免.</p><h2 id="去噪算法"><a href="#去噪算法" class="headerlink" title="去噪算法"></a>去噪算法</h2><h3 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a>中值滤波</h3><p><strong>概述：</strong> 中值滤波是一种非线性空间滤波器, 它的响应基于图像滤波器包围的图像区域中像素的统计排序, 然后由统计排序结果的值代替中心像素的值. 中值滤波器将其像素邻域内的灰度中值代替代替该像素的值. 中值滤波器的使用非常普遍, 这是因为对于一定类型的随机噪声, 它提供了一种优秀的去噪能力, 比小尺寸的均值滤波器模糊程度明显要低. 中值滤波器对处理脉冲噪声(也称椒盐噪声)非常有效, 因为该噪声是以黑白点叠加在图像上面的.</p><p>与中值滤波相似的还有最大值滤波器和最小值滤波器.</p><h3 id="均值滤波"><a href="#均值滤波" class="headerlink" title="均值滤波"></a>均值滤波</h3><p><strong>概述：</strong> 均值滤波器的输出是包含在滤波掩模领域内像素的简单平均值. 均值滤波器最常用的目的就是减噪. 然而, 图像边缘也是由图像灰度尖锐变化带来的特性, 所以均值滤波还是存在不希望的边缘模糊负面效应.</p><p>均值滤波还有一个重要应用, 为了对感兴趣的图像得出一个粗略描述而模糊一幅图像. 这样, 那些较小物体的强度与背景揉合在一起了, 较大物体变得像斑点而易于检测.掩模的大小由即将融入背景中的物体尺寸决定.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>见<a href="https://github.com/wangshub/python-image-process" target="_blank" rel="noopener">https://github.com/wangshub/python-image-process</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python数字图像处理-图像噪声与去噪算法&quot;&gt;&lt;a href=&quot;#python数字图像处理-图像噪声与去噪算法&quot; class=&quot;headerlink&quot; title=&quot;python数字图像处理-图像噪声与去噪算法&quot;&gt;&lt;/a&gt;python数字图像处理-图像噪声与去噪
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
      <category term="algorithm" scheme="http://wangshub.github.io/tags/algorithm/"/>
    
      <category term="image" scheme="http://wangshub.github.io/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>python数字图像处理-图像的基本结构和基础知识</title>
    <link href="http://wangshub.github.io/2017/12/16/python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E5%9B%BE%E5%83%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://wangshub.github.io/2017/12/16/python数字图像处理-图像的基本结构和基础知识/</id>
    <published>2017-12-16T09:10:39.000Z</published>
    <updated>2018-03-17T09:10:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字图像处理-图像的基本结构和基础知识"><a href="#数字图像处理-图像的基本结构和基础知识" class="headerlink" title="数字图像处理-图像的基本结构和基础知识"></a>数字图像处理-图像的基本结构和基础知识</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e2a04b0bc.bmp" alt="LenaRGB.bmp" title="">                </div>                <div class="image-caption">LenaRGB.bmp</div>            </figure><h2 id="一、python实现BMP图像的读取和显示"><a href="#一、python实现BMP图像的读取和显示" class="headerlink" title="一、python实现BMP图像的读取和显示"></a>一、python实现BMP图像的读取和显示</h2><p>BMP文件格式，又称为Bitmap（位图）或是DIB(Device-Independent Device，设备无关位图)，是Windows系统中广泛使用的图像文件格式。由于它可以不作任何变换地保存图像像素域的数据，因此成为我们取得RAW数据的重要来源。Windows的图形用户界面（graphical user interfaces）也在它的内建图像子系统GDI中对BMP格式提供了支持。</p><p>BMP文件的数据按照从文件头开始的先后顺序分为四个部分：</p><ol><li><p><strong>bmp文件头(bmp file header)</strong> ：提供文件的格式、大小等信息</p></li><li><p><strong>位图信息头(bitmap information)</strong>：提供图像数据的尺寸、位平面数、压缩方式、颜色索引等信息</p></li><li><p><strong>调色板(color palette)</strong>：可选，如使用索引来表示图像，调色板就是索引与其对应的颜色的映射表</p></li><li><p><strong>位图数据(bitmap data)</strong>：就是图像数据</p></li></ol><blockquote><p>参考链接<br><a href="https://zh.wikipedia.org/wiki/BMP" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/BMP</a></p></blockquote><h2 id="二、python统计图像的直方图"><a href="#二、python统计图像的直方图" class="headerlink" title="二、python统计图像的直方图"></a>二、python统计图像的直方图</h2><p><strong>图像直方图</strong>（英语：Image Histogram）是用以表示数字图像中亮度分布的直方图，标绘了图像中每个亮度值的像素数。可以借助观察该直方图了解需要如何调整亮度分布。这种直方图中，横坐标的左侧为纯黑、较暗的区域，而右侧为较亮、纯白的区域。因此，一张较暗图片的图像直方图中的数据多集中于左侧和中间部分；而整体明亮、只有少量阴影的图像则相反。<br>很多数码相机提供图像直方图功能，拍摄者可以通过观察图像直方图了解到当前图像是否过分曝光或者曝光不足。<br>计算机视觉领域常借助图像直方图来实现图像的二值化</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e49c0fd38.png" alt="2 统计直方图.png" title="">                </div>                <div class="image-caption">2 统计直方图.png</div>            </figure><blockquote><p>参考链接<br><a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE#%E5%9B%BE%E5%83%8F%E7%9B%B4%E6%96%B9%E5%9B%BE" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE#%E5%9B%BE%E5%83%8F%E7%9B%B4%E6%96%B9%E5%9B%BE</a></p></blockquote><h2 id="三、RGB、YIQ、HSI、XYZ颜色空间"><a href="#三、RGB、YIQ、HSI、XYZ颜色空间" class="headerlink" title="三、RGB、YIQ、HSI、XYZ颜色空间"></a>三、RGB、YIQ、HSI、XYZ颜色空间</h2><h3 id="YIQ"><a href="#YIQ" class="headerlink" title="YIQ"></a>YIQ</h3><p>YIQ色彩空间通常被北美的电视系统所采用，属于NTSC（National Television Standards Committee）系统。这里Y不是指黄色，而是指颜色的明视度（Luminance），即亮度（Brightness）。其实Y就是图像的灰度值（Gray value），而I和Q则是指色调（Chrominance），即描述图像色彩及饱和度的属性。在YIQ系统中，Y分量代表图像的亮度信息，I、Q两个分量则携带颜色信息，I分量代表从橙色到青色的颜色变化，而Q分量则代表从紫色到黄绿色的颜色变化。</p><p>NTSC制为了进一步压缩色度带宽，用色差信号I,Q来代替U,V。若采用U,V色差信号，则色度、亮度信号的共频带部分极大，低端不共频带的亮度信号带宽很小，亮、色干扰大。将彩色图像从RGB转换到YIQ色彩空间，可以把彩色图像中的亮度信息与色度信息分开，分别独立进行处理。</p><p>RGB和YIQ的对应关系用下面的方程式表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Y=0.299R+0.587G+0.114B</span><br><span class="line">I=0.596R-0.274G-0.322B</span><br><span class="line">Q=0.211R-0.523G+0.312B</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e49c3a072.png" alt="3 YIQ分量.png" title="">                </div>                <div class="image-caption">3 YIQ分量.png</div>            </figure><h3 id="HSI"><a href="#HSI" class="headerlink" title="HSI"></a>HSI</h3><ul><li><p>色调H（Hue）：与光波的波长有关，它表示人的感官对不同颜色的感受，如红色、绿色、蓝色等，它也可表示一定范围的颜色，如暖色、冷色等。</p></li><li><p>饱和度S（Saturation）：表示颜色的纯度，纯光谱色是完全饱和的，加入白光会稀释饱和度。饱和度越大，颜色看起来就会越鲜艳，反之亦然。</p></li><li><p>亮度I（Intensity）：对应成像亮度和图像灰度，是颜色的明亮程度。<br>若将RGB单位立方体沿主对角线进行投影，可得到六边形，这样，原来沿主对角线的灰色都投影到中心白色点，而红色点（1，0，0）则位于右边的角上，绿色点（0，1，0）位于左上角，蓝色点（0，0，1）则位于左下角。</p></li></ul><p>HSI颜色模型的双六棱锥表示，I是强度轴，色调H的角度范围为[0，2π]，其中，纯红色的角度为0，纯绿色的角度为2π/3，纯蓝色的角度为4π/3。饱和度S是颜色空间任一点距I轴的距离。当然，若用圆表示RGB模型的投影，则HSI色度空间为双圆锥3D表示。</p><p>注意： 当强度I=0时，色调H、饱和度S无定义；当S=0时，色调H无定义。<br>HSI模型也可用圆柱来表示，如图9-5所示。若将其展开，并按图9-6进行定义，可得到HSI调色板。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e15929e62.jpg" alt="HSI_Formula.jpg" title="">                </div>                <div class="image-caption">HSI_Formula.jpg</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e49c37be5.png" alt="5 HSI分量.png" title="">                </div>                <div class="image-caption">5 HSI分量.png</div>            </figure><h3 id="XYZ"><a href="#XYZ" class="headerlink" title="XYZ"></a>XYZ</h3><p>国际照明委员会(CIE)在进行了大量正常人视觉测量和统计,1931年建立了”标准色度观察者”， 从而奠定了现代CIE标准色度学的定量基础。由于”标准色度观察者”用来标定光谱色时出现负 刺激值，计算不便，也不易理解，因此1931年CIE在RGB系统基础上，改用三个假想的原色X、Y、 Z建立了一个新的色度系统。将它匹配等能光谱的三刺激值，定名为”CIE1931 标准色度观察者 光谱三刺激值”，简称为”CIE1931标准色度观察者”。这一系统叫做”CIE1931标准色度系统”或称为” 2° 视场XYZ色度系统”。CIEXYZ颜色空间稍加变换就可得到Yxy色彩空间，其中Y取三刺激值中Y的值， 表示亮度，x、y反映颜色的色度特性。定义如下：在色彩管理中，选择与设备无关的颜色空间是 十分重要的，与设备无关的颜色空间由国际照明委员会(CIE)制定，包括CIEXYZ和CIELAB两个标准。 它们包含了人眼所能辨别的全部颜色。而且，CIEYxy测色制的建立给定量的确定颜色创造了条件。 但是，在这一空间中，两种不同颜色之间的距离值并不能正确地反映人们色彩感觉差别的大小， 也就是说在CIEYxy色厦图中，在 不同的位置不同方向上颜色的宽容量是不同的，这就是Yxy颜色空间 的不均匀性。这一缺陷的存在，使得在Yxy及XYZ空间不能直观地评价颜色。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e26b25e70.jpg" alt="xyz.jpg" title="">                </div>                <div class="image-caption">xyz.jpg</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e49c3b8d4.png" alt="6 XYZ分量.png" title="">                </div>                <div class="image-caption">6 XYZ分量.png</div>            </figure><h2 id="四、python代码实现"><a href="#四、python代码实现" class="headerlink" title="四、python代码实现"></a>四、python代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_bmp</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment"># BMP 的读取与显示</span></span><br><span class="line">    plt.figure(<span class="string">"LenaRGB.bmp"</span>)</span><br><span class="line">    plt.title(<span class="string">"LenaRGB.bmp"</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_hist</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment"># 直方图</span></span><br><span class="line">    plt.figure(<span class="string">"Lena hist"</span>)</span><br><span class="line">    plt.title(<span class="string">'Lena hist figure'</span>)</span><br><span class="line">    arr = img.flatten()</span><br><span class="line">    n, bins, patches = plt.hist(arr, bins=<span class="number">256</span>, normed=<span class="number">1</span>, facecolor=<span class="string">'green'</span>, alpha=<span class="number">0.75</span>)  </span><br><span class="line">    plt.show()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_rgb</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment"># 显示RGB图像    </span></span><br><span class="line">    plt.subplot(<span class="number">221</span>)</span><br><span class="line">    plt.title(<span class="string">'orignal'</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.subplot(<span class="number">222</span>)</span><br><span class="line">    plt.title(<span class="string">'R'</span>)</span><br><span class="line">    plt.imshow(img[:, :, <span class="number">0</span>], cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    plt.title(<span class="string">'G'</span>)</span><br><span class="line">    plt.imshow(img[:, :, <span class="number">1</span>], cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    plt.title(<span class="string">'B'</span>)</span><br><span class="line">    plt.imshow(img[:, :, <span class="number">2</span>], cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shou_yiq</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment"># 显示YIQ分量</span></span><br><span class="line">    R = np.mat(img[:, :, <span class="number">0</span>])</span><br><span class="line">    G = np.mat(img[:, :, <span class="number">1</span>])</span><br><span class="line">    B = np.mat(img[:, :, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># aH = np.array([(0.299, 0.587, 0.114), </span></span><br><span class="line">    <span class="comment">#               (0.596, -0.274, -0.322), </span></span><br><span class="line">    <span class="comment">#               (0.211, -0.523, 0.312)])</span></span><br><span class="line">    Y = <span class="number">0.299</span> * R + <span class="number">0.587</span> * G + <span class="number">0.114</span> * B</span><br><span class="line">    I = <span class="number">0.596</span> * R - <span class="number">0.274</span> * G - <span class="number">0.322</span> * B</span><br><span class="line">    Q = <span class="number">0.211</span> * R - <span class="number">0.523</span> * G - <span class="number">0.312</span> * B</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">221</span>)</span><br><span class="line">    plt.title(<span class="string">'orignal'</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.subplot(<span class="number">222</span>)</span><br><span class="line">    plt.title(<span class="string">'Y'</span>)</span><br><span class="line">    plt.imshow(Y, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    plt.title(<span class="string">'I'</span>)</span><br><span class="line">    plt.imshow(I, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    plt.title(<span class="string">'Q'</span>)</span><br><span class="line">    plt.imshow(Q, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="comment"># YIQ = </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_xyz</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment"># 显示YIQ分量</span></span><br><span class="line">    R = np.mat(img[:, :, <span class="number">0</span>])</span><br><span class="line">    G = np.mat(img[:, :, <span class="number">1</span>])</span><br><span class="line">    B = np.mat(img[:, :, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># aH = np.array([(0.299, 0.587, 0.114), </span></span><br><span class="line">    <span class="comment">#               (0.596, -0.274, -0.322), </span></span><br><span class="line">    <span class="comment">#               (0.211, -0.523, 0.312)])</span></span><br><span class="line">    X = <span class="number">0.490</span> * R + <span class="number">0.310</span> * G + <span class="number">0.200</span> * B</span><br><span class="line">    Y = <span class="number">0.177</span> * R + <span class="number">0.813</span> * G + <span class="number">0.011</span> * B</span><br><span class="line">    Z = <span class="number">0.000</span> * R + <span class="number">0.010</span> * G + <span class="number">0.990</span> * B</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">221</span>)</span><br><span class="line">    plt.title(<span class="string">'orignal'</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.subplot(<span class="number">222</span>)</span><br><span class="line">    plt.title(<span class="string">'X'</span>)</span><br><span class="line">    plt.imshow(X, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    plt.title(<span class="string">'Y'</span>)</span><br><span class="line">    plt.imshow(Y, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    plt.title(<span class="string">'Z'</span>)</span><br><span class="line">    plt.imshow(Z, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_hsi</span><span class="params">(img)</span>:</span></span><br><span class="line">    rows, cols, dims = img.shape </span><br><span class="line">    R = np.mat(img[:, :, <span class="number">0</span>])</span><br><span class="line">    G = np.mat(img[:, :, <span class="number">1</span>])</span><br><span class="line">    B = np.mat(img[:, :, <span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line">    I = (R + G + B) / <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    E = np.mat(np.ones([rows, cols]))</span><br><span class="line">    minRGB = np.mat(img.min(<span class="number">2</span>))</span><br><span class="line">    lv = <span class="number">3</span> * E / (R + G + B)</span><br><span class="line">    S = E - np.multiply(lv, minRGB)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># S = np.mat(np.zeros([rows, cols]))</span></span><br><span class="line">    <span class="comment"># for i in range(rows):</span></span><br><span class="line">    <span class="comment">#     for j in range(cols):</span></span><br><span class="line">    <span class="comment">#         S[i, j] = 1 - 3/(R[i, j] + G[i, j] + B[i, j]) * min([R[i, j], G[i, j], B[i, j]])</span></span><br><span class="line"></span><br><span class="line">    H = np.mat(np.zeros([rows, cols]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(rows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(cols):</span><br><span class="line">            up = (R[i, j] - G[i, j] + R[i, j] - B[i, j]) / <span class="number">2</span></span><br><span class="line">            down = (R[i, j] - G[i, j])**<span class="number">2</span> + (R[i, j] - B[i, j]) * (G[i, j] - B[i, j])**<span class="number">0.5</span></span><br><span class="line">            H[i, j] = math.acos(up / down)</span><br><span class="line">            </span><br><span class="line">    plt.subplot(<span class="number">221</span>)</span><br><span class="line">    plt.title(<span class="string">'orignal'</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.subplot(<span class="number">222</span>)</span><br><span class="line">    plt.title(<span class="string">'I'</span>)</span><br><span class="line">    plt.imshow(I, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    plt.title(<span class="string">'S'</span>)</span><br><span class="line">    plt.imshow(S, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    plt.title(<span class="string">'H'</span>)</span><br><span class="line">    plt.imshow(H, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    img = np.array(Image.open(<span class="string">'/home/sun/Desktop/PycharmProjects/Digital_image_process_lxk/lab1/LenaRGB.bmp'</span>))</span><br><span class="line">    rows, cols, dims = img.shape</span><br><span class="line">    <span class="keyword">print</span> img.shape  </span><br><span class="line">    <span class="keyword">print</span> img.dtype </span><br><span class="line">    <span class="keyword">print</span> img.size </span><br><span class="line">    <span class="keyword">print</span> type(img)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># show_bmp(img)</span></span><br><span class="line">    <span class="comment"># show_hist(img)</span></span><br><span class="line">    <span class="comment"># show_rgb(img)</span></span><br><span class="line">    <span class="comment"># shou_yiq(img)</span></span><br><span class="line">    <span class="comment"># show_hsi(img)</span></span><br><span class="line">    <span class="comment"># show_xyz(img)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字图像处理-图像的基本结构和基础知识&quot;&gt;&lt;a href=&quot;#数字图像处理-图像的基本结构和基础知识&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理-图像的基本结构和基础知识&quot;&gt;&lt;/a&gt;数字图像处理-图像的基本结构和基础知识&lt;/h1&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
      <category term="algorithm" scheme="http://wangshub.github.io/tags/algorithm/"/>
    
      <category term="image" scheme="http://wangshub.github.io/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>python：将图片转换成excel文档</title>
    <link href="http://wangshub.github.io/2017/12/14/image-to-excel/"/>
    <id>http://wangshub.github.io/2017/12/14/image-to-excel/</id>
    <published>2017-12-14T13:28:12.000Z</published>
    <updated>2018-03-17T09:10:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python：将图片转换成excel文档"><a href="#python：将图片转换成excel文档" class="headerlink" title="python：将图片转换成excel文档"></a>python：将图片转换成excel文档</h1><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx1.sinaimg.cn/large/c3a916a7gy1fmgmi7aqirj20dd09zmy2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>读取图像，获取图像每个像素点的RGB值；</li><li>根据每个像素点的RGB值设置excel每个方格的颜色值；</li><li>根据像素点的坐标，写入excel文件；</li><li>保存退出；</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_xy</span><span class="params">(row, col)</span>:</span></span><br><span class="line">    table = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">    num1 = col / <span class="number">26</span></span><br><span class="line">    num2 = col % <span class="number">26</span></span><br><span class="line">    <span class="comment"># print num1, num2</span></span><br><span class="line">    <span class="keyword">if</span> num1 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> table[num2 - <span class="number">1</span>] + str(row)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> table[num1<span class="number">-1</span>] + table[num2 - <span class="number">1</span>] + str(row)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    img = np.array(Image.open(<span class="string">'whale.jpeg'</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># plt.figure("whale")</span></span><br><span class="line">    <span class="comment"># plt.imshow(img)</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line">    rows, cols, dims = img.shape</span><br><span class="line">    <span class="keyword">print</span> img.shape  </span><br><span class="line">    <span class="keyword">print</span> img.dtype </span><br><span class="line">    <span class="keyword">print</span> img.size </span><br><span class="line">    <span class="keyword">print</span> type(img)</span><br><span class="line">    <span class="comment"># print img[188, 188, 0]</span></span><br><span class="line"></span><br><span class="line">    excel = xlsxwriter.Workbook(<span class="string">'image_excel.xlsx'</span>)</span><br><span class="line">    cellformat = excel.add_format(&#123;<span class="string">'bg_color'</span>: <span class="string">'#123456'</span>,</span><br><span class="line">                                   <span class="string">'font_color'</span>: <span class="string">'#654321'</span>&#125;)</span><br><span class="line">    worksheet1 = excel.add_worksheet()</span><br><span class="line"></span><br><span class="line">    data = []</span><br><span class="line">    color = [<span class="string">''</span>] * cols</span><br><span class="line">    cellcolor = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(rows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(cols):</span><br><span class="line">            <span class="comment"># print hex(img[i, j, 0]), hex(img[i, j, 1]), hex(img[i, j, 2])</span></span><br><span class="line">            cellcolor = (hex(img[i, j, <span class="number">0</span>]) + hex(img[i, j, <span class="number">1</span>]) + hex(img[i, j, <span class="number">2</span>])).replace(<span class="string">'0x'</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="comment"># print cellcolor</span></span><br><span class="line">           </span><br><span class="line">            cellformat = excel.add_format(&#123;<span class="string">'bg_color'</span>: <span class="string">'#'</span>+cellcolor, </span><br><span class="line">                                           <span class="string">'font_color'</span>: <span class="string">'#'</span>+cellcolor&#125;)</span><br><span class="line">           </span><br><span class="line">            <span class="comment"># cellformat = excel.add_format(&#123;'bg_color': '#C6EFCE', </span></span><br><span class="line">            <span class="comment">#                                'font_color': '#006100'&#125;)</span></span><br><span class="line">            </span><br><span class="line">            worksheet1.conditional_format(get_xy(i, j), &#123;<span class="string">'type'</span>: <span class="string">'cell'</span>,</span><br><span class="line">                                                        <span class="string">'criteria'</span>: <span class="string">'&lt;'</span>,</span><br><span class="line">                                                        <span class="string">'value'</span>: <span class="number">50</span>,</span><br><span class="line">                                                        <span class="string">'format'</span>: cellformat&#125;)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># data.append(data_row)</span></span><br><span class="line">    excel.close()    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># print get_xy(133, 27)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python：将图片转换成excel文档&quot;&gt;&lt;a href=&quot;#python：将图片转换成excel文档&quot; class=&quot;headerlink&quot; title=&quot;python：将图片转换成excel文档&quot;&gt;&lt;/a&gt;python：将图片转换成excel文档&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
  </entry>
  
</feed>
